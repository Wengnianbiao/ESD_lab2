
prj2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004034  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080041e4  080041e4  000141e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800429c  0800429c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800429c  0800429c  0001429c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042a4  080042a4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042a4  080042a4  000142a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042a8  080042a8  000142a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080042ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004974  20000010  080042bc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004984  080042bc  00024984  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001095c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002370  00000000  00000000  0003099c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bb0  00000000  00000000  00032d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  000338c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000235d0  00000000  00000000  00034358  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c429  00000000  00000000  00057928  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d720e  00000000  00000000  00063d51  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013af5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e54  00000000  00000000  0013afdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080041cc 	.word	0x080041cc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	080041cc 	.word	0x080041cc

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004f4:	4a0c      	ldr	r2, [pc, #48]	; (8000528 <MX_FREERTOS_Init+0x38>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	480c      	ldr	r0, [pc, #48]	; (800052c <MX_FREERTOS_Init+0x3c>)
 80004fa:	f001 f95f 	bl	80017bc <osThreadNew>
 80004fe:	4602      	mov	r2, r0
 8000500:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <MX_FREERTOS_Init+0x40>)
 8000502:	601a      	str	r2, [r3, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000504:	4a0b      	ldr	r2, [pc, #44]	; (8000534 <MX_FREERTOS_Init+0x44>)
 8000506:	2100      	movs	r1, #0
 8000508:	480b      	ldr	r0, [pc, #44]	; (8000538 <MX_FREERTOS_Init+0x48>)
 800050a:	f001 f957 	bl	80017bc <osThreadNew>
 800050e:	4602      	mov	r2, r0
 8000510:	4b0a      	ldr	r3, [pc, #40]	; (800053c <MX_FREERTOS_Init+0x4c>)
 8000512:	601a      	str	r2, [r3, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000514:	4a0a      	ldr	r2, [pc, #40]	; (8000540 <MX_FREERTOS_Init+0x50>)
 8000516:	2100      	movs	r1, #0
 8000518:	480a      	ldr	r0, [pc, #40]	; (8000544 <MX_FREERTOS_Init+0x54>)
 800051a:	f001 f94f 	bl	80017bc <osThreadNew>
 800051e:	4602      	mov	r2, r0
 8000520:	4b09      	ldr	r3, [pc, #36]	; (8000548 <MX_FREERTOS_Init+0x58>)
 8000522:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}
 8000528:	08004220 	.word	0x08004220
 800052c:	0800054d 	.word	0x0800054d
 8000530:	20004934 	.word	0x20004934
 8000534:	08004244 	.word	0x08004244
 8000538:	0800055d 	.word	0x0800055d
 800053c:	20004938 	.word	0x20004938
 8000540:	08004268 	.word	0x08004268
 8000544:	08000579 	.word	0x08000579
 8000548:	2000493c 	.word	0x2000493c

0800054c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000554:	2001      	movs	r0, #1
 8000556:	f001 f9d7 	bl	8001908 <osDelay>
 800055a:	e7fb      	b.n	8000554 <StartDefaultTask+0x8>

0800055c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);  // GPIO PB7 -LD2
 8000564:	2180      	movs	r1, #128	; 0x80
 8000566:	4803      	ldr	r0, [pc, #12]	; (8000574 <StartTask02+0x18>)
 8000568:	f000 fc93 	bl	8000e92 <HAL_GPIO_TogglePin>
	HAL_Delay(200);  // ms
 800056c:	20c8      	movs	r0, #200	; 0xc8
 800056e:	f000 f9c5 	bl	80008fc <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);  // GPIO PB7 -LD2
 8000572:	e7f7      	b.n	8000564 <StartTask02+0x8>
 8000574:	40020400 	.word	0x40020400

08000578 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);  // GPIO PB14 -LD3
 8000580:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000584:	4803      	ldr	r0, [pc, #12]	; (8000594 <StartTask03+0x1c>)
 8000586:	f000 fc84 	bl	8000e92 <HAL_GPIO_TogglePin>
	HAL_Delay(500);  // ms
 800058a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800058e:	f000 f9b5 	bl	80008fc <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);  // GPIO PB14 -LD3
 8000592:	e7f5      	b.n	8000580 <StartTask03+0x8>
 8000594:	40020400 	.word	0x40020400

08000598 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ac:	2300      	movs	r3, #0
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <MX_GPIO_Init+0x60>)
 80005b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b4:	4a10      	ldr	r2, [pc, #64]	; (80005f8 <MX_GPIO_Init+0x60>)
 80005b6:	f043 0302 	orr.w	r3, r3, #2
 80005ba:	6313      	str	r3, [r2, #48]	; 0x30
 80005bc:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <MX_GPIO_Init+0x60>)
 80005be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c0:	f003 0302 	and.w	r3, r3, #2
 80005c4:	603b      	str	r3, [r7, #0]
 80005c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80005ce:	480b      	ldr	r0, [pc, #44]	; (80005fc <MX_GPIO_Init+0x64>)
 80005d0:	f000 fc46 	bl	8000e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 80005d4:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80005d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005da:	2301      	movs	r3, #1
 80005dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	4619      	mov	r1, r3
 80005ea:	4804      	ldr	r0, [pc, #16]	; (80005fc <MX_GPIO_Init+0x64>)
 80005ec:	f000 fa8e 	bl	8000b0c <HAL_GPIO_Init>

}
 80005f0:	bf00      	nop
 80005f2:	3718      	adds	r7, #24
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40020400 	.word	0x40020400

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 f908 	bl	8000818 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f80a 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f7ff ffc4 	bl	8000598 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000610:	f001 f86a 	bl	80016e8 <osKernelInitialize>
  MX_FREERTOS_Init(); 
 8000614:	f7ff ff6c 	bl	80004f0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000618:	f001 f89a 	bl	8001750 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061c:	e7fe      	b.n	800061c <main+0x1c>
	...

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	; 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	2230      	movs	r2, #48	; 0x30
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f003 fdc3 	bl	80041ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemClock_Config+0xb8>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	4a22      	ldr	r2, [pc, #136]	; (80006d8 <SystemClock_Config+0xb8>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	; 0x40
 8000654:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemClock_Config+0xb8>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemClock_Config+0xbc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800066c:	4a1b      	ldr	r2, [pc, #108]	; (80006dc <SystemClock_Config+0xbc>)
 800066e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemClock_Config+0xbc>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000680:	2302      	movs	r3, #2
 8000682:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000688:	2310      	movs	r3, #16
 800068a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800068c:	2300      	movs	r3, #0
 800068e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	4618      	mov	r0, r3
 8000696:	f000 fc17 	bl	8000ec8 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006a0:	f000 f81e 	bl	80006e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a8:	2300      	movs	r3, #0
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 fe72 	bl	80013a8 <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006ca:	f000 f809 	bl	80006e0 <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	; 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
	...

080006f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	4b12      	ldr	r3, [pc, #72]	; (8000744 <HAL_MspInit+0x54>)
 80006fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006fe:	4a11      	ldr	r2, [pc, #68]	; (8000744 <HAL_MspInit+0x54>)
 8000700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000704:	6453      	str	r3, [r2, #68]	; 0x44
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <HAL_MspInit+0x54>)
 8000708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <HAL_MspInit+0x54>)
 8000718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071a:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <HAL_MspInit+0x54>)
 800071c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000720:	6413      	str	r3, [r2, #64]	; 0x40
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <HAL_MspInit+0x54>)
 8000724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	210f      	movs	r1, #15
 8000732:	f06f 0001 	mvn.w	r0, #1
 8000736:	f000 f9c0 	bl	8000aba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800

08000748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr

08000756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075a:	e7fe      	b.n	800075a <HardFault_Handler+0x4>

0800075c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <MemManage_Handler+0x4>

08000762 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000766:	e7fe      	b.n	8000766 <BusFault_Handler+0x4>

08000768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800076c:	e7fe      	b.n	800076c <UsageFault_Handler+0x4>

0800076e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000780:	f000 f89c 	bl	80008bc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000784:	f002 fcb2 	bl	80030ec <xTaskGetSchedulerState>
 8000788:	4603      	mov	r3, r0
 800078a:	2b01      	cmp	r3, #1
 800078c:	d001      	beq.n	8000792 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800078e:	f003 fa83 	bl	8003c98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <SystemInit+0x28>)
 800079e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007a2:	4a07      	ldr	r2, [pc, #28]	; (80007c0 <SystemInit+0x28>)
 80007a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007ac:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <SystemInit+0x28>)
 80007ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007b2:	609a      	str	r2, [r3, #8]
#endif
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80007c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007fc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80007c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80007ca:	e003      	b.n	80007d4 <LoopCopyDataInit>

080007cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80007ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80007d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80007d2:	3104      	adds	r1, #4

080007d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80007d4:	480b      	ldr	r0, [pc, #44]	; (8000804 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80007d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80007da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80007dc:	d3f6      	bcc.n	80007cc <CopyDataInit>
  ldr  r2, =_sbss
 80007de:	4a0b      	ldr	r2, [pc, #44]	; (800080c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80007e0:	e002      	b.n	80007e8 <LoopFillZerobss>

080007e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80007e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80007e4:	f842 3b04 	str.w	r3, [r2], #4

080007e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80007ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80007ec:	d3f9      	bcc.n	80007e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80007ee:	f7ff ffd3 	bl	8000798 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007f2:	f003 fcb3 	bl	800415c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007f6:	f7ff ff03 	bl	8000600 <main>
  bx  lr    
 80007fa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80007fc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000800:	080042ac 	.word	0x080042ac
  ldr  r0, =_sdata
 8000804:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000808:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 800080c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000810:	20004984 	.word	0x20004984

08000814 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000814:	e7fe      	b.n	8000814 <ADC_IRQHandler>
	...

08000818 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800081c:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <HAL_Init+0x40>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a0d      	ldr	r2, [pc, #52]	; (8000858 <HAL_Init+0x40>)
 8000822:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000826:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000828:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <HAL_Init+0x40>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <HAL_Init+0x40>)
 800082e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000832:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <HAL_Init+0x40>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a07      	ldr	r2, [pc, #28]	; (8000858 <HAL_Init+0x40>)
 800083a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800083e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000840:	2003      	movs	r0, #3
 8000842:	f000 f92f 	bl	8000aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000846:	200f      	movs	r0, #15
 8000848:	f000 f808 	bl	800085c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800084c:	f7ff ff50 	bl	80006f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40023c00 	.word	0x40023c00

0800085c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <HAL_InitTick+0x54>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <HAL_InitTick+0x58>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4619      	mov	r1, r3
 800086e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000872:	fbb3 f3f1 	udiv	r3, r3, r1
 8000876:	fbb2 f3f3 	udiv	r3, r2, r3
 800087a:	4618      	mov	r0, r3
 800087c:	f000 f939 	bl	8000af2 <HAL_SYSTICK_Config>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000886:	2301      	movs	r3, #1
 8000888:	e00e      	b.n	80008a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2b0f      	cmp	r3, #15
 800088e:	d80a      	bhi.n	80008a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000890:	2200      	movs	r2, #0
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	f04f 30ff 	mov.w	r0, #4294967295
 8000898:	f000 f90f 	bl	8000aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800089c:	4a06      	ldr	r2, [pc, #24]	; (80008b8 <HAL_InitTick+0x5c>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008a2:	2300      	movs	r3, #0
 80008a4:	e000      	b.n	80008a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000000 	.word	0x20000000
 80008b4:	20000008 	.word	0x20000008
 80008b8:	20000004 	.word	0x20000004

080008bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_IncTick+0x20>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <HAL_IncTick+0x24>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4413      	add	r3, r2
 80008cc:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <HAL_IncTick+0x24>)
 80008ce:	6013      	str	r3, [r2, #0]
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	20000008 	.word	0x20000008
 80008e0:	20004940 	.word	0x20004940

080008e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  return uwTick;
 80008e8:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <HAL_GetTick+0x14>)
 80008ea:	681b      	ldr	r3, [r3, #0]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20004940 	.word	0x20004940

080008fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000904:	f7ff ffee 	bl	80008e4 <HAL_GetTick>
 8000908:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000914:	d005      	beq.n	8000922 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <HAL_Delay+0x40>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	461a      	mov	r2, r3
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	4413      	add	r3, r2
 8000920:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000922:	bf00      	nop
 8000924:	f7ff ffde 	bl	80008e4 <HAL_GetTick>
 8000928:	4602      	mov	r2, r0
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	429a      	cmp	r2, r3
 8000932:	d8f7      	bhi.n	8000924 <HAL_Delay+0x28>
  {
  }
}
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000008 	.word	0x20000008

08000940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f003 0307 	and.w	r3, r3, #7
 800094e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <__NVIC_SetPriorityGrouping+0x44>)
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000956:	68ba      	ldr	r2, [r7, #8]
 8000958:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800095c:	4013      	ands	r3, r2
 800095e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000968:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800096c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000972:	4a04      	ldr	r2, [pc, #16]	; (8000984 <__NVIC_SetPriorityGrouping+0x44>)
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	60d3      	str	r3, [r2, #12]
}
 8000978:	bf00      	nop
 800097a:	3714      	adds	r7, #20
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800098c:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <__NVIC_GetPriorityGrouping+0x18>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	0a1b      	lsrs	r3, r3, #8
 8000992:	f003 0307 	and.w	r3, r3, #7
}
 8000996:	4618      	mov	r0, r3
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	6039      	str	r1, [r7, #0]
 80009ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	db0a      	blt.n	80009ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	490c      	ldr	r1, [pc, #48]	; (80009f0 <__NVIC_SetPriority+0x4c>)
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	0112      	lsls	r2, r2, #4
 80009c4:	b2d2      	uxtb	r2, r2
 80009c6:	440b      	add	r3, r1
 80009c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009cc:	e00a      	b.n	80009e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	4908      	ldr	r1, [pc, #32]	; (80009f4 <__NVIC_SetPriority+0x50>)
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	f003 030f 	and.w	r3, r3, #15
 80009da:	3b04      	subs	r3, #4
 80009dc:	0112      	lsls	r2, r2, #4
 80009de:	b2d2      	uxtb	r2, r2
 80009e0:	440b      	add	r3, r1
 80009e2:	761a      	strb	r2, [r3, #24]
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	e000e100 	.word	0xe000e100
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b089      	sub	sp, #36	; 0x24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	f1c3 0307 	rsb	r3, r3, #7
 8000a12:	2b04      	cmp	r3, #4
 8000a14:	bf28      	it	cs
 8000a16:	2304      	movcs	r3, #4
 8000a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	3304      	adds	r3, #4
 8000a1e:	2b06      	cmp	r3, #6
 8000a20:	d902      	bls.n	8000a28 <NVIC_EncodePriority+0x30>
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	3b03      	subs	r3, #3
 8000a26:	e000      	b.n	8000a2a <NVIC_EncodePriority+0x32>
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	43da      	mvns	r2, r3
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	401a      	ands	r2, r3
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a40:	f04f 31ff 	mov.w	r1, #4294967295
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4a:	43d9      	mvns	r1, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a50:	4313      	orrs	r3, r2
         );
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3724      	adds	r7, #36	; 0x24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
	...

08000a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a70:	d301      	bcc.n	8000a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a72:	2301      	movs	r3, #1
 8000a74:	e00f      	b.n	8000a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <SysTick_Config+0x40>)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a7e:	210f      	movs	r1, #15
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	f7ff ff8e 	bl	80009a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <SysTick_Config+0x40>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a8e:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <SysTick_Config+0x40>)
 8000a90:	2207      	movs	r2, #7
 8000a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	e000e010 	.word	0xe000e010

08000aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff ff47 	bl	8000940 <__NVIC_SetPriorityGrouping>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b086      	sub	sp, #24
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
 8000ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000acc:	f7ff ff5c 	bl	8000988 <__NVIC_GetPriorityGrouping>
 8000ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	68b9      	ldr	r1, [r7, #8]
 8000ad6:	6978      	ldr	r0, [r7, #20]
 8000ad8:	f7ff ff8e 	bl	80009f8 <NVIC_EncodePriority>
 8000adc:	4602      	mov	r2, r0
 8000ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff5d 	bl	80009a4 <__NVIC_SetPriority>
}
 8000aea:	bf00      	nop
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f7ff ffb0 	bl	8000a60 <SysTick_Config>
 8000b00:	4603      	mov	r3, r0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b089      	sub	sp, #36	; 0x24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
 8000b26:	e177      	b.n	8000e18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b28:	2201      	movs	r2, #1
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	697a      	ldr	r2, [r7, #20]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	f040 8166 	bne.w	8000e12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d00b      	beq.n	8000b66 <HAL_GPIO_Init+0x5a>
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d007      	beq.n	8000b66 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b5a:	2b11      	cmp	r3, #17
 8000b5c:	d003      	beq.n	8000b66 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	2b12      	cmp	r3, #18
 8000b64:	d130      	bne.n	8000bc8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	2203      	movs	r2, #3
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43db      	mvns	r3, r3
 8000b78:	69ba      	ldr	r2, [r7, #24]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	68da      	ldr	r2, [r3, #12]
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	69ba      	ldr	r2, [r7, #24]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	69ba      	ldr	r2, [r7, #24]
 8000b94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	69ba      	ldr	r2, [r7, #24]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	091b      	lsrs	r3, r3, #4
 8000bb2:	f003 0201 	and.w	r2, r3, #1
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	69ba      	ldr	r2, [r7, #24]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	69ba      	ldr	r2, [r7, #24]
 8000bc6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	2203      	movs	r2, #3
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	69ba      	ldr	r2, [r7, #24]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	689a      	ldr	r2, [r3, #8]
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d003      	beq.n	8000c08 <HAL_GPIO_Init+0xfc>
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	2b12      	cmp	r3, #18
 8000c06:	d123      	bne.n	8000c50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	08da      	lsrs	r2, r3, #3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3208      	adds	r2, #8
 8000c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	f003 0307 	and.w	r3, r3, #7
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	220f      	movs	r2, #15
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	43db      	mvns	r3, r3
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	691a      	ldr	r2, [r3, #16]
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	08da      	lsrs	r2, r3, #3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3208      	adds	r2, #8
 8000c4a:	69b9      	ldr	r1, [r7, #24]
 8000c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	2203      	movs	r2, #3
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	43db      	mvns	r3, r3
 8000c62:	69ba      	ldr	r2, [r7, #24]
 8000c64:	4013      	ands	r3, r2
 8000c66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f003 0203 	and.w	r2, r3, #3
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	f000 80c0 	beq.w	8000e12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	4b65      	ldr	r3, [pc, #404]	; (8000e2c <HAL_GPIO_Init+0x320>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	4a64      	ldr	r2, [pc, #400]	; (8000e2c <HAL_GPIO_Init+0x320>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca2:	4b62      	ldr	r3, [pc, #392]	; (8000e2c <HAL_GPIO_Init+0x320>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cae:	4a60      	ldr	r2, [pc, #384]	; (8000e30 <HAL_GPIO_Init+0x324>)
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	089b      	lsrs	r3, r3, #2
 8000cb4:	3302      	adds	r3, #2
 8000cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	f003 0303 	and.w	r3, r3, #3
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	220f      	movs	r2, #15
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a57      	ldr	r2, [pc, #348]	; (8000e34 <HAL_GPIO_Init+0x328>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d037      	beq.n	8000d4a <HAL_GPIO_Init+0x23e>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a56      	ldr	r2, [pc, #344]	; (8000e38 <HAL_GPIO_Init+0x32c>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d031      	beq.n	8000d46 <HAL_GPIO_Init+0x23a>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a55      	ldr	r2, [pc, #340]	; (8000e3c <HAL_GPIO_Init+0x330>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d02b      	beq.n	8000d42 <HAL_GPIO_Init+0x236>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a54      	ldr	r2, [pc, #336]	; (8000e40 <HAL_GPIO_Init+0x334>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d025      	beq.n	8000d3e <HAL_GPIO_Init+0x232>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a53      	ldr	r2, [pc, #332]	; (8000e44 <HAL_GPIO_Init+0x338>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d01f      	beq.n	8000d3a <HAL_GPIO_Init+0x22e>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a52      	ldr	r2, [pc, #328]	; (8000e48 <HAL_GPIO_Init+0x33c>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d019      	beq.n	8000d36 <HAL_GPIO_Init+0x22a>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a51      	ldr	r2, [pc, #324]	; (8000e4c <HAL_GPIO_Init+0x340>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d013      	beq.n	8000d32 <HAL_GPIO_Init+0x226>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a50      	ldr	r2, [pc, #320]	; (8000e50 <HAL_GPIO_Init+0x344>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d00d      	beq.n	8000d2e <HAL_GPIO_Init+0x222>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a4f      	ldr	r2, [pc, #316]	; (8000e54 <HAL_GPIO_Init+0x348>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d007      	beq.n	8000d2a <HAL_GPIO_Init+0x21e>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a4e      	ldr	r2, [pc, #312]	; (8000e58 <HAL_GPIO_Init+0x34c>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d101      	bne.n	8000d26 <HAL_GPIO_Init+0x21a>
 8000d22:	2309      	movs	r3, #9
 8000d24:	e012      	b.n	8000d4c <HAL_GPIO_Init+0x240>
 8000d26:	230a      	movs	r3, #10
 8000d28:	e010      	b.n	8000d4c <HAL_GPIO_Init+0x240>
 8000d2a:	2308      	movs	r3, #8
 8000d2c:	e00e      	b.n	8000d4c <HAL_GPIO_Init+0x240>
 8000d2e:	2307      	movs	r3, #7
 8000d30:	e00c      	b.n	8000d4c <HAL_GPIO_Init+0x240>
 8000d32:	2306      	movs	r3, #6
 8000d34:	e00a      	b.n	8000d4c <HAL_GPIO_Init+0x240>
 8000d36:	2305      	movs	r3, #5
 8000d38:	e008      	b.n	8000d4c <HAL_GPIO_Init+0x240>
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	e006      	b.n	8000d4c <HAL_GPIO_Init+0x240>
 8000d3e:	2303      	movs	r3, #3
 8000d40:	e004      	b.n	8000d4c <HAL_GPIO_Init+0x240>
 8000d42:	2302      	movs	r3, #2
 8000d44:	e002      	b.n	8000d4c <HAL_GPIO_Init+0x240>
 8000d46:	2301      	movs	r3, #1
 8000d48:	e000      	b.n	8000d4c <HAL_GPIO_Init+0x240>
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	69fa      	ldr	r2, [r7, #28]
 8000d4e:	f002 0203 	and.w	r2, r2, #3
 8000d52:	0092      	lsls	r2, r2, #2
 8000d54:	4093      	lsls	r3, r2
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d5c:	4934      	ldr	r1, [pc, #208]	; (8000e30 <HAL_GPIO_Init+0x324>)
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	089b      	lsrs	r3, r3, #2
 8000d62:	3302      	adds	r3, #2
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d6a:	4b3c      	ldr	r3, [pc, #240]	; (8000e5c <HAL_GPIO_Init+0x350>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	43db      	mvns	r3, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4013      	ands	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d8e:	4a33      	ldr	r2, [pc, #204]	; (8000e5c <HAL_GPIO_Init+0x350>)
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d94:	4b31      	ldr	r3, [pc, #196]	; (8000e5c <HAL_GPIO_Init+0x350>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4013      	ands	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d003      	beq.n	8000db8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000db8:	4a28      	ldr	r2, [pc, #160]	; (8000e5c <HAL_GPIO_Init+0x350>)
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dbe:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <HAL_GPIO_Init+0x350>)
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d003      	beq.n	8000de2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000de2:	4a1e      	ldr	r2, [pc, #120]	; (8000e5c <HAL_GPIO_Init+0x350>)
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000de8:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <HAL_GPIO_Init+0x350>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d003      	beq.n	8000e0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e0c:	4a13      	ldr	r2, [pc, #76]	; (8000e5c <HAL_GPIO_Init+0x350>)
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3301      	adds	r3, #1
 8000e16:	61fb      	str	r3, [r7, #28]
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	2b0f      	cmp	r3, #15
 8000e1c:	f67f ae84 	bls.w	8000b28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e20:	bf00      	nop
 8000e22:	3724      	adds	r7, #36	; 0x24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40013800 	.word	0x40013800
 8000e34:	40020000 	.word	0x40020000
 8000e38:	40020400 	.word	0x40020400
 8000e3c:	40020800 	.word	0x40020800
 8000e40:	40020c00 	.word	0x40020c00
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40021400 	.word	0x40021400
 8000e4c:	40021800 	.word	0x40021800
 8000e50:	40021c00 	.word	0x40021c00
 8000e54:	40022000 	.word	0x40022000
 8000e58:	40022400 	.word	0x40022400
 8000e5c:	40013c00 	.word	0x40013c00

08000e60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	807b      	strh	r3, [r7, #2]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e70:	787b      	ldrb	r3, [r7, #1]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e76:	887a      	ldrh	r2, [r7, #2]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e7c:	e003      	b.n	8000e86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e7e:	887b      	ldrh	r3, [r7, #2]
 8000e80:	041a      	lsls	r2, r3, #16
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	619a      	str	r2, [r3, #24]
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	695a      	ldr	r2, [r3, #20]
 8000ea2:	887b      	ldrh	r3, [r7, #2]
 8000ea4:	401a      	ands	r2, r3
 8000ea6:	887b      	ldrh	r3, [r7, #2]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d104      	bne.n	8000eb6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000eac:	887b      	ldrh	r3, [r7, #2]
 8000eae:	041a      	lsls	r2, r3, #16
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000eb4:	e002      	b.n	8000ebc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000eb6:	887a      	ldrh	r2, [r7, #2]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	619a      	str	r2, [r3, #24]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d101      	bne.n	8000eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e25b      	b.n	8001392 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d075      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ee6:	4ba3      	ldr	r3, [pc, #652]	; (8001174 <HAL_RCC_OscConfig+0x2ac>)
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f003 030c 	and.w	r3, r3, #12
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	d00c      	beq.n	8000f0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ef2:	4ba0      	ldr	r3, [pc, #640]	; (8001174 <HAL_RCC_OscConfig+0x2ac>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000efa:	2b08      	cmp	r3, #8
 8000efc:	d112      	bne.n	8000f24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000efe:	4b9d      	ldr	r3, [pc, #628]	; (8001174 <HAL_RCC_OscConfig+0x2ac>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f0a:	d10b      	bne.n	8000f24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f0c:	4b99      	ldr	r3, [pc, #612]	; (8001174 <HAL_RCC_OscConfig+0x2ac>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d05b      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x108>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d157      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	e236      	b.n	8001392 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f2c:	d106      	bne.n	8000f3c <HAL_RCC_OscConfig+0x74>
 8000f2e:	4b91      	ldr	r3, [pc, #580]	; (8001174 <HAL_RCC_OscConfig+0x2ac>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a90      	ldr	r2, [pc, #576]	; (8001174 <HAL_RCC_OscConfig+0x2ac>)
 8000f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	e01d      	b.n	8000f78 <HAL_RCC_OscConfig+0xb0>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f44:	d10c      	bne.n	8000f60 <HAL_RCC_OscConfig+0x98>
 8000f46:	4b8b      	ldr	r3, [pc, #556]	; (8001174 <HAL_RCC_OscConfig+0x2ac>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a8a      	ldr	r2, [pc, #552]	; (8001174 <HAL_RCC_OscConfig+0x2ac>)
 8000f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	4b88      	ldr	r3, [pc, #544]	; (8001174 <HAL_RCC_OscConfig+0x2ac>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a87      	ldr	r2, [pc, #540]	; (8001174 <HAL_RCC_OscConfig+0x2ac>)
 8000f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	e00b      	b.n	8000f78 <HAL_RCC_OscConfig+0xb0>
 8000f60:	4b84      	ldr	r3, [pc, #528]	; (8001174 <HAL_RCC_OscConfig+0x2ac>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a83      	ldr	r2, [pc, #524]	; (8001174 <HAL_RCC_OscConfig+0x2ac>)
 8000f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	4b81      	ldr	r3, [pc, #516]	; (8001174 <HAL_RCC_OscConfig+0x2ac>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a80      	ldr	r2, [pc, #512]	; (8001174 <HAL_RCC_OscConfig+0x2ac>)
 8000f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d013      	beq.n	8000fa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f80:	f7ff fcb0 	bl	80008e4 <HAL_GetTick>
 8000f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f86:	e008      	b.n	8000f9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f88:	f7ff fcac 	bl	80008e4 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b64      	cmp	r3, #100	; 0x64
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e1fb      	b.n	8001392 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f9a:	4b76      	ldr	r3, [pc, #472]	; (8001174 <HAL_RCC_OscConfig+0x2ac>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d0f0      	beq.n	8000f88 <HAL_RCC_OscConfig+0xc0>
 8000fa6:	e014      	b.n	8000fd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa8:	f7ff fc9c 	bl	80008e4 <HAL_GetTick>
 8000fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fae:	e008      	b.n	8000fc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fb0:	f7ff fc98 	bl	80008e4 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b64      	cmp	r3, #100	; 0x64
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e1e7      	b.n	8001392 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fc2:	4b6c      	ldr	r3, [pc, #432]	; (8001174 <HAL_RCC_OscConfig+0x2ac>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d1f0      	bne.n	8000fb0 <HAL_RCC_OscConfig+0xe8>
 8000fce:	e000      	b.n	8000fd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d063      	beq.n	80010a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fde:	4b65      	ldr	r3, [pc, #404]	; (8001174 <HAL_RCC_OscConfig+0x2ac>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f003 030c 	and.w	r3, r3, #12
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d00b      	beq.n	8001002 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fea:	4b62      	ldr	r3, [pc, #392]	; (8001174 <HAL_RCC_OscConfig+0x2ac>)
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ff2:	2b08      	cmp	r3, #8
 8000ff4:	d11c      	bne.n	8001030 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ff6:	4b5f      	ldr	r3, [pc, #380]	; (8001174 <HAL_RCC_OscConfig+0x2ac>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d116      	bne.n	8001030 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001002:	4b5c      	ldr	r3, [pc, #368]	; (8001174 <HAL_RCC_OscConfig+0x2ac>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	2b00      	cmp	r3, #0
 800100c:	d005      	beq.n	800101a <HAL_RCC_OscConfig+0x152>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d001      	beq.n	800101a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e1bb      	b.n	8001392 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800101a:	4b56      	ldr	r3, [pc, #344]	; (8001174 <HAL_RCC_OscConfig+0x2ac>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	691b      	ldr	r3, [r3, #16]
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	4952      	ldr	r1, [pc, #328]	; (8001174 <HAL_RCC_OscConfig+0x2ac>)
 800102a:	4313      	orrs	r3, r2
 800102c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800102e:	e03a      	b.n	80010a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d020      	beq.n	800107a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001038:	4b4f      	ldr	r3, [pc, #316]	; (8001178 <HAL_RCC_OscConfig+0x2b0>)
 800103a:	2201      	movs	r2, #1
 800103c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800103e:	f7ff fc51 	bl	80008e4 <HAL_GetTick>
 8001042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001044:	e008      	b.n	8001058 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001046:	f7ff fc4d 	bl	80008e4 <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d901      	bls.n	8001058 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e19c      	b.n	8001392 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001058:	4b46      	ldr	r3, [pc, #280]	; (8001174 <HAL_RCC_OscConfig+0x2ac>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0f0      	beq.n	8001046 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001064:	4b43      	ldr	r3, [pc, #268]	; (8001174 <HAL_RCC_OscConfig+0x2ac>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	4940      	ldr	r1, [pc, #256]	; (8001174 <HAL_RCC_OscConfig+0x2ac>)
 8001074:	4313      	orrs	r3, r2
 8001076:	600b      	str	r3, [r1, #0]
 8001078:	e015      	b.n	80010a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800107a:	4b3f      	ldr	r3, [pc, #252]	; (8001178 <HAL_RCC_OscConfig+0x2b0>)
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001080:	f7ff fc30 	bl	80008e4 <HAL_GetTick>
 8001084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001086:	e008      	b.n	800109a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001088:	f7ff fc2c 	bl	80008e4 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b02      	cmp	r3, #2
 8001094:	d901      	bls.n	800109a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e17b      	b.n	8001392 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800109a:	4b36      	ldr	r3, [pc, #216]	; (8001174 <HAL_RCC_OscConfig+0x2ac>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1f0      	bne.n	8001088 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0308 	and.w	r3, r3, #8
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d030      	beq.n	8001114 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d016      	beq.n	80010e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ba:	4b30      	ldr	r3, [pc, #192]	; (800117c <HAL_RCC_OscConfig+0x2b4>)
 80010bc:	2201      	movs	r2, #1
 80010be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010c0:	f7ff fc10 	bl	80008e4 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010c8:	f7ff fc0c 	bl	80008e4 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e15b      	b.n	8001392 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010da:	4b26      	ldr	r3, [pc, #152]	; (8001174 <HAL_RCC_OscConfig+0x2ac>)
 80010dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0f0      	beq.n	80010c8 <HAL_RCC_OscConfig+0x200>
 80010e6:	e015      	b.n	8001114 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010e8:	4b24      	ldr	r3, [pc, #144]	; (800117c <HAL_RCC_OscConfig+0x2b4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ee:	f7ff fbf9 	bl	80008e4 <HAL_GetTick>
 80010f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010f4:	e008      	b.n	8001108 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010f6:	f7ff fbf5 	bl	80008e4 <HAL_GetTick>
 80010fa:	4602      	mov	r2, r0
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d901      	bls.n	8001108 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001104:	2303      	movs	r3, #3
 8001106:	e144      	b.n	8001392 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001108:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <HAL_RCC_OscConfig+0x2ac>)
 800110a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1f0      	bne.n	80010f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	2b00      	cmp	r3, #0
 800111e:	f000 80a0 	beq.w	8001262 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001122:	2300      	movs	r3, #0
 8001124:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001126:	4b13      	ldr	r3, [pc, #76]	; (8001174 <HAL_RCC_OscConfig+0x2ac>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10f      	bne.n	8001152 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <HAL_RCC_OscConfig+0x2ac>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <HAL_RCC_OscConfig+0x2ac>)
 800113c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001140:	6413      	str	r3, [r2, #64]	; 0x40
 8001142:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <HAL_RCC_OscConfig+0x2ac>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800114e:	2301      	movs	r3, #1
 8001150:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <HAL_RCC_OscConfig+0x2b8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800115a:	2b00      	cmp	r3, #0
 800115c:	d121      	bne.n	80011a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <HAL_RCC_OscConfig+0x2b8>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a07      	ldr	r2, [pc, #28]	; (8001180 <HAL_RCC_OscConfig+0x2b8>)
 8001164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001168:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800116a:	f7ff fbbb 	bl	80008e4 <HAL_GetTick>
 800116e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001170:	e011      	b.n	8001196 <HAL_RCC_OscConfig+0x2ce>
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800
 8001178:	42470000 	.word	0x42470000
 800117c:	42470e80 	.word	0x42470e80
 8001180:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001184:	f7ff fbae 	bl	80008e4 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e0fd      	b.n	8001392 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001196:	4b81      	ldr	r3, [pc, #516]	; (800139c <HAL_RCC_OscConfig+0x4d4>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0f0      	beq.n	8001184 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d106      	bne.n	80011b8 <HAL_RCC_OscConfig+0x2f0>
 80011aa:	4b7d      	ldr	r3, [pc, #500]	; (80013a0 <HAL_RCC_OscConfig+0x4d8>)
 80011ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011ae:	4a7c      	ldr	r2, [pc, #496]	; (80013a0 <HAL_RCC_OscConfig+0x4d8>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6713      	str	r3, [r2, #112]	; 0x70
 80011b6:	e01c      	b.n	80011f2 <HAL_RCC_OscConfig+0x32a>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	2b05      	cmp	r3, #5
 80011be:	d10c      	bne.n	80011da <HAL_RCC_OscConfig+0x312>
 80011c0:	4b77      	ldr	r3, [pc, #476]	; (80013a0 <HAL_RCC_OscConfig+0x4d8>)
 80011c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011c4:	4a76      	ldr	r2, [pc, #472]	; (80013a0 <HAL_RCC_OscConfig+0x4d8>)
 80011c6:	f043 0304 	orr.w	r3, r3, #4
 80011ca:	6713      	str	r3, [r2, #112]	; 0x70
 80011cc:	4b74      	ldr	r3, [pc, #464]	; (80013a0 <HAL_RCC_OscConfig+0x4d8>)
 80011ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011d0:	4a73      	ldr	r2, [pc, #460]	; (80013a0 <HAL_RCC_OscConfig+0x4d8>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	6713      	str	r3, [r2, #112]	; 0x70
 80011d8:	e00b      	b.n	80011f2 <HAL_RCC_OscConfig+0x32a>
 80011da:	4b71      	ldr	r3, [pc, #452]	; (80013a0 <HAL_RCC_OscConfig+0x4d8>)
 80011dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011de:	4a70      	ldr	r2, [pc, #448]	; (80013a0 <HAL_RCC_OscConfig+0x4d8>)
 80011e0:	f023 0301 	bic.w	r3, r3, #1
 80011e4:	6713      	str	r3, [r2, #112]	; 0x70
 80011e6:	4b6e      	ldr	r3, [pc, #440]	; (80013a0 <HAL_RCC_OscConfig+0x4d8>)
 80011e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011ea:	4a6d      	ldr	r2, [pc, #436]	; (80013a0 <HAL_RCC_OscConfig+0x4d8>)
 80011ec:	f023 0304 	bic.w	r3, r3, #4
 80011f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d015      	beq.n	8001226 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011fa:	f7ff fb73 	bl	80008e4 <HAL_GetTick>
 80011fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001200:	e00a      	b.n	8001218 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001202:	f7ff fb6f 	bl	80008e4 <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001210:	4293      	cmp	r3, r2
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e0bc      	b.n	8001392 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001218:	4b61      	ldr	r3, [pc, #388]	; (80013a0 <HAL_RCC_OscConfig+0x4d8>)
 800121a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0ee      	beq.n	8001202 <HAL_RCC_OscConfig+0x33a>
 8001224:	e014      	b.n	8001250 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001226:	f7ff fb5d 	bl	80008e4 <HAL_GetTick>
 800122a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800122c:	e00a      	b.n	8001244 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800122e:	f7ff fb59 	bl	80008e4 <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	f241 3288 	movw	r2, #5000	; 0x1388
 800123c:	4293      	cmp	r3, r2
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e0a6      	b.n	8001392 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001244:	4b56      	ldr	r3, [pc, #344]	; (80013a0 <HAL_RCC_OscConfig+0x4d8>)
 8001246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1ee      	bne.n	800122e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001250:	7dfb      	ldrb	r3, [r7, #23]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d105      	bne.n	8001262 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001256:	4b52      	ldr	r3, [pc, #328]	; (80013a0 <HAL_RCC_OscConfig+0x4d8>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	4a51      	ldr	r2, [pc, #324]	; (80013a0 <HAL_RCC_OscConfig+0x4d8>)
 800125c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001260:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	2b00      	cmp	r3, #0
 8001268:	f000 8092 	beq.w	8001390 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800126c:	4b4c      	ldr	r3, [pc, #304]	; (80013a0 <HAL_RCC_OscConfig+0x4d8>)
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f003 030c 	and.w	r3, r3, #12
 8001274:	2b08      	cmp	r3, #8
 8001276:	d05c      	beq.n	8001332 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d141      	bne.n	8001304 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001280:	4b48      	ldr	r3, [pc, #288]	; (80013a4 <HAL_RCC_OscConfig+0x4dc>)
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001286:	f7ff fb2d 	bl	80008e4 <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800128c:	e008      	b.n	80012a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800128e:	f7ff fb29 	bl	80008e4 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e078      	b.n	8001392 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012a0:	4b3f      	ldr	r3, [pc, #252]	; (80013a0 <HAL_RCC_OscConfig+0x4d8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1f0      	bne.n	800128e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69da      	ldr	r2, [r3, #28]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a1b      	ldr	r3, [r3, #32]
 80012b4:	431a      	orrs	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ba:	019b      	lsls	r3, r3, #6
 80012bc:	431a      	orrs	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c2:	085b      	lsrs	r3, r3, #1
 80012c4:	3b01      	subs	r3, #1
 80012c6:	041b      	lsls	r3, r3, #16
 80012c8:	431a      	orrs	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ce:	061b      	lsls	r3, r3, #24
 80012d0:	4933      	ldr	r1, [pc, #204]	; (80013a0 <HAL_RCC_OscConfig+0x4d8>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012d6:	4b33      	ldr	r3, [pc, #204]	; (80013a4 <HAL_RCC_OscConfig+0x4dc>)
 80012d8:	2201      	movs	r2, #1
 80012da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012dc:	f7ff fb02 	bl	80008e4 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012e4:	f7ff fafe 	bl	80008e4 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e04d      	b.n	8001392 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012f6:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <HAL_RCC_OscConfig+0x4d8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0f0      	beq.n	80012e4 <HAL_RCC_OscConfig+0x41c>
 8001302:	e045      	b.n	8001390 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001304:	4b27      	ldr	r3, [pc, #156]	; (80013a4 <HAL_RCC_OscConfig+0x4dc>)
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130a:	f7ff faeb 	bl	80008e4 <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001312:	f7ff fae7 	bl	80008e4 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e036      	b.n	8001392 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001324:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <HAL_RCC_OscConfig+0x4d8>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1f0      	bne.n	8001312 <HAL_RCC_OscConfig+0x44a>
 8001330:	e02e      	b.n	8001390 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d101      	bne.n	800133e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e029      	b.n	8001392 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <HAL_RCC_OscConfig+0x4d8>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	429a      	cmp	r2, r3
 8001350:	d11c      	bne.n	800138c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800135c:	429a      	cmp	r2, r3
 800135e:	d115      	bne.n	800138c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001366:	4013      	ands	r3, r2
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800136c:	4293      	cmp	r3, r2
 800136e:	d10d      	bne.n	800138c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800137a:	429a      	cmp	r2, r3
 800137c:	d106      	bne.n	800138c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001388:	429a      	cmp	r2, r3
 800138a:	d001      	beq.n	8001390 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e000      	b.n	8001392 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40007000 	.word	0x40007000
 80013a0:	40023800 	.word	0x40023800
 80013a4:	42470060 	.word	0x42470060

080013a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e0cc      	b.n	8001556 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013bc:	4b68      	ldr	r3, [pc, #416]	; (8001560 <HAL_RCC_ClockConfig+0x1b8>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 030f 	and.w	r3, r3, #15
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d90c      	bls.n	80013e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ca:	4b65      	ldr	r3, [pc, #404]	; (8001560 <HAL_RCC_ClockConfig+0x1b8>)
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d2:	4b63      	ldr	r3, [pc, #396]	; (8001560 <HAL_RCC_ClockConfig+0x1b8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d001      	beq.n	80013e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e0b8      	b.n	8001556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d020      	beq.n	8001432 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d005      	beq.n	8001408 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013fc:	4b59      	ldr	r3, [pc, #356]	; (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	4a58      	ldr	r2, [pc, #352]	; (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 8001402:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001406:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0308 	and.w	r3, r3, #8
 8001410:	2b00      	cmp	r3, #0
 8001412:	d005      	beq.n	8001420 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001414:	4b53      	ldr	r3, [pc, #332]	; (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	4a52      	ldr	r2, [pc, #328]	; (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 800141a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800141e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001420:	4b50      	ldr	r3, [pc, #320]	; (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	494d      	ldr	r1, [pc, #308]	; (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 800142e:	4313      	orrs	r3, r2
 8001430:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	2b00      	cmp	r3, #0
 800143c:	d044      	beq.n	80014c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d107      	bne.n	8001456 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001446:	4b47      	ldr	r3, [pc, #284]	; (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d119      	bne.n	8001486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e07f      	b.n	8001556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b02      	cmp	r3, #2
 800145c:	d003      	beq.n	8001466 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001462:	2b03      	cmp	r3, #3
 8001464:	d107      	bne.n	8001476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001466:	4b3f      	ldr	r3, [pc, #252]	; (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d109      	bne.n	8001486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e06f      	b.n	8001556 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001476:	4b3b      	ldr	r3, [pc, #236]	; (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e067      	b.n	8001556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001486:	4b37      	ldr	r3, [pc, #220]	; (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f023 0203 	bic.w	r2, r3, #3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	4934      	ldr	r1, [pc, #208]	; (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 8001494:	4313      	orrs	r3, r2
 8001496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001498:	f7ff fa24 	bl	80008e4 <HAL_GetTick>
 800149c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800149e:	e00a      	b.n	80014b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014a0:	f7ff fa20 	bl	80008e4 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e04f      	b.n	8001556 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014b6:	4b2b      	ldr	r3, [pc, #172]	; (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 020c 	and.w	r2, r3, #12
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d1eb      	bne.n	80014a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014c8:	4b25      	ldr	r3, [pc, #148]	; (8001560 <HAL_RCC_ClockConfig+0x1b8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 030f 	and.w	r3, r3, #15
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d20c      	bcs.n	80014f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014d6:	4b22      	ldr	r3, [pc, #136]	; (8001560 <HAL_RCC_ClockConfig+0x1b8>)
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014de:	4b20      	ldr	r3, [pc, #128]	; (8001560 <HAL_RCC_ClockConfig+0x1b8>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d001      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e032      	b.n	8001556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d008      	beq.n	800150e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014fc:	4b19      	ldr	r3, [pc, #100]	; (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	4916      	ldr	r1, [pc, #88]	; (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 800150a:	4313      	orrs	r3, r2
 800150c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0308 	and.w	r3, r3, #8
 8001516:	2b00      	cmp	r3, #0
 8001518:	d009      	beq.n	800152e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800151a:	4b12      	ldr	r3, [pc, #72]	; (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	490e      	ldr	r1, [pc, #56]	; (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	4313      	orrs	r3, r2
 800152c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800152e:	f000 f821 	bl	8001574 <HAL_RCC_GetSysClockFreq>
 8001532:	4601      	mov	r1, r0
 8001534:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	091b      	lsrs	r3, r3, #4
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 8001540:	5cd3      	ldrb	r3, [r2, r3]
 8001542:	fa21 f303 	lsr.w	r3, r1, r3
 8001546:	4a09      	ldr	r2, [pc, #36]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <HAL_RCC_ClockConfig+0x1c8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff f984 	bl	800085c <HAL_InitTick>

  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40023c00 	.word	0x40023c00
 8001564:	40023800 	.word	0x40023800
 8001568:	0800428c 	.word	0x0800428c
 800156c:	20000000 	.word	0x20000000
 8001570:	20000004 	.word	0x20000004

08001574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	2300      	movs	r3, #0
 8001584:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800158a:	4b50      	ldr	r3, [pc, #320]	; (80016cc <HAL_RCC_GetSysClockFreq+0x158>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f003 030c 	and.w	r3, r3, #12
 8001592:	2b04      	cmp	r3, #4
 8001594:	d007      	beq.n	80015a6 <HAL_RCC_GetSysClockFreq+0x32>
 8001596:	2b08      	cmp	r3, #8
 8001598:	d008      	beq.n	80015ac <HAL_RCC_GetSysClockFreq+0x38>
 800159a:	2b00      	cmp	r3, #0
 800159c:	f040 808d 	bne.w	80016ba <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015a0:	4b4b      	ldr	r3, [pc, #300]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80015a2:	60bb      	str	r3, [r7, #8]
       break;
 80015a4:	e08c      	b.n	80016c0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015a6:	4b4b      	ldr	r3, [pc, #300]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80015a8:	60bb      	str	r3, [r7, #8]
      break;
 80015aa:	e089      	b.n	80016c0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015ac:	4b47      	ldr	r3, [pc, #284]	; (80016cc <HAL_RCC_GetSysClockFreq+0x158>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015b6:	4b45      	ldr	r3, [pc, #276]	; (80016cc <HAL_RCC_GetSysClockFreq+0x158>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d023      	beq.n	800160a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015c2:	4b42      	ldr	r3, [pc, #264]	; (80016cc <HAL_RCC_GetSysClockFreq+0x158>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	099b      	lsrs	r3, r3, #6
 80015c8:	f04f 0400 	mov.w	r4, #0
 80015cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	ea03 0501 	and.w	r5, r3, r1
 80015d8:	ea04 0602 	and.w	r6, r4, r2
 80015dc:	4a3d      	ldr	r2, [pc, #244]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80015de:	fb02 f106 	mul.w	r1, r2, r6
 80015e2:	2200      	movs	r2, #0
 80015e4:	fb02 f205 	mul.w	r2, r2, r5
 80015e8:	440a      	add	r2, r1
 80015ea:	493a      	ldr	r1, [pc, #232]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80015ec:	fba5 0101 	umull	r0, r1, r5, r1
 80015f0:	1853      	adds	r3, r2, r1
 80015f2:	4619      	mov	r1, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f04f 0400 	mov.w	r4, #0
 80015fa:	461a      	mov	r2, r3
 80015fc:	4623      	mov	r3, r4
 80015fe:	f7fe fdf7 	bl	80001f0 <__aeabi_uldivmod>
 8001602:	4603      	mov	r3, r0
 8001604:	460c      	mov	r4, r1
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	e049      	b.n	800169e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800160a:	4b30      	ldr	r3, [pc, #192]	; (80016cc <HAL_RCC_GetSysClockFreq+0x158>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	099b      	lsrs	r3, r3, #6
 8001610:	f04f 0400 	mov.w	r4, #0
 8001614:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	ea03 0501 	and.w	r5, r3, r1
 8001620:	ea04 0602 	and.w	r6, r4, r2
 8001624:	4629      	mov	r1, r5
 8001626:	4632      	mov	r2, r6
 8001628:	f04f 0300 	mov.w	r3, #0
 800162c:	f04f 0400 	mov.w	r4, #0
 8001630:	0154      	lsls	r4, r2, #5
 8001632:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001636:	014b      	lsls	r3, r1, #5
 8001638:	4619      	mov	r1, r3
 800163a:	4622      	mov	r2, r4
 800163c:	1b49      	subs	r1, r1, r5
 800163e:	eb62 0206 	sbc.w	r2, r2, r6
 8001642:	f04f 0300 	mov.w	r3, #0
 8001646:	f04f 0400 	mov.w	r4, #0
 800164a:	0194      	lsls	r4, r2, #6
 800164c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001650:	018b      	lsls	r3, r1, #6
 8001652:	1a5b      	subs	r3, r3, r1
 8001654:	eb64 0402 	sbc.w	r4, r4, r2
 8001658:	f04f 0100 	mov.w	r1, #0
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	00e2      	lsls	r2, r4, #3
 8001662:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001666:	00d9      	lsls	r1, r3, #3
 8001668:	460b      	mov	r3, r1
 800166a:	4614      	mov	r4, r2
 800166c:	195b      	adds	r3, r3, r5
 800166e:	eb44 0406 	adc.w	r4, r4, r6
 8001672:	f04f 0100 	mov.w	r1, #0
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	02a2      	lsls	r2, r4, #10
 800167c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001680:	0299      	lsls	r1, r3, #10
 8001682:	460b      	mov	r3, r1
 8001684:	4614      	mov	r4, r2
 8001686:	4618      	mov	r0, r3
 8001688:	4621      	mov	r1, r4
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f04f 0400 	mov.w	r4, #0
 8001690:	461a      	mov	r2, r3
 8001692:	4623      	mov	r3, r4
 8001694:	f7fe fdac 	bl	80001f0 <__aeabi_uldivmod>
 8001698:	4603      	mov	r3, r0
 800169a:	460c      	mov	r4, r1
 800169c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <HAL_RCC_GetSysClockFreq+0x158>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	0c1b      	lsrs	r3, r3, #16
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	3301      	adds	r3, #1
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b6:	60bb      	str	r3, [r7, #8]
      break;
 80016b8:	e002      	b.n	80016c0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80016bc:	60bb      	str	r3, [r7, #8]
      break;
 80016be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016c0:	68bb      	ldr	r3, [r7, #8]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800
 80016d0:	00f42400 	.word	0x00f42400
 80016d4:	017d7840 	.word	0x017d7840

080016d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
	...

080016e8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80016ee:	f3ef 8305 	mrs	r3, IPSR
 80016f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80016f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d10f      	bne.n	800171a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016fa:	f3ef 8310 	mrs	r3, PRIMASK
 80016fe:	607b      	str	r3, [r7, #4]
  return(result);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d105      	bne.n	8001712 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001706:	f3ef 8311 	mrs	r3, BASEPRI
 800170a:	603b      	str	r3, [r7, #0]
  return(result);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d007      	beq.n	8001722 <osKernelInitialize+0x3a>
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <osKernelInitialize+0x64>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d103      	bne.n	8001722 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800171a:	f06f 0305 	mvn.w	r3, #5
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	e00c      	b.n	800173c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <osKernelInitialize+0x64>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d105      	bne.n	8001736 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <osKernelInitialize+0x64>)
 800172c:	2201      	movs	r2, #1
 800172e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	e002      	b.n	800173c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001736:	f04f 33ff 	mov.w	r3, #4294967295
 800173a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800173c:	68fb      	ldr	r3, [r7, #12]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	2000002c 	.word	0x2000002c

08001750 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001756:	f3ef 8305 	mrs	r3, IPSR
 800175a:	60bb      	str	r3, [r7, #8]
  return(result);
 800175c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10f      	bne.n	8001782 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001762:	f3ef 8310 	mrs	r3, PRIMASK
 8001766:	607b      	str	r3, [r7, #4]
  return(result);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d105      	bne.n	800177a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800176e:	f3ef 8311 	mrs	r3, BASEPRI
 8001772:	603b      	str	r3, [r7, #0]
  return(result);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d007      	beq.n	800178a <osKernelStart+0x3a>
 800177a:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <osKernelStart+0x68>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b02      	cmp	r3, #2
 8001780:	d103      	bne.n	800178a <osKernelStart+0x3a>
    stat = osErrorISR;
 8001782:	f06f 0305 	mvn.w	r3, #5
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	e010      	b.n	80017ac <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800178a:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <osKernelStart+0x68>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d109      	bne.n	80017a6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001792:	f7ff ffa1 	bl	80016d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001796:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <osKernelStart+0x68>)
 8001798:	2202      	movs	r2, #2
 800179a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800179c:	f001 f870 	bl	8002880 <vTaskStartScheduler>
      stat = osOK;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	e002      	b.n	80017ac <osKernelStart+0x5c>
    } else {
      stat = osError;
 80017a6:	f04f 33ff 	mov.w	r3, #4294967295
 80017aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80017ac:	68fb      	ldr	r3, [r7, #12]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	2000002c 	.word	0x2000002c

080017bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b090      	sub	sp, #64	; 0x40
 80017c0:	af04      	add	r7, sp, #16
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80017cc:	f3ef 8305 	mrs	r3, IPSR
 80017d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80017d2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f040 808f 	bne.w	80018f8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017da:	f3ef 8310 	mrs	r3, PRIMASK
 80017de:	61bb      	str	r3, [r7, #24]
  return(result);
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d105      	bne.n	80017f2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80017e6:	f3ef 8311 	mrs	r3, BASEPRI
 80017ea:	617b      	str	r3, [r7, #20]
  return(result);
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <osThreadNew+0x3e>
 80017f2:	4b44      	ldr	r3, [pc, #272]	; (8001904 <osThreadNew+0x148>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d07e      	beq.n	80018f8 <osThreadNew+0x13c>
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d07b      	beq.n	80018f8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8001804:	2318      	movs	r3, #24
 8001806:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8001808:	2300      	movs	r3, #0
 800180a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800180c:	f04f 33ff 	mov.w	r3, #4294967295
 8001810:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d045      	beq.n	80018a4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d002      	beq.n	8001826 <osThreadNew+0x6a>
        name = attr->name;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d002      	beq.n	8001834 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	2b00      	cmp	r3, #0
 8001838:	d008      	beq.n	800184c <osThreadNew+0x90>
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	2b38      	cmp	r3, #56	; 0x38
 800183e:	d805      	bhi.n	800184c <osThreadNew+0x90>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <osThreadNew+0x94>
        return (NULL);
 800184c:	2300      	movs	r3, #0
 800184e:	e054      	b.n	80018fa <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	089b      	lsrs	r3, r3, #2
 800185e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d00e      	beq.n	8001886 <osThreadNew+0xca>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	2b5b      	cmp	r3, #91	; 0x5b
 800186e:	d90a      	bls.n	8001886 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001874:	2b00      	cmp	r3, #0
 8001876:	d006      	beq.n	8001886 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d002      	beq.n	8001886 <osThreadNew+0xca>
        mem = 1;
 8001880:	2301      	movs	r3, #1
 8001882:	623b      	str	r3, [r7, #32]
 8001884:	e010      	b.n	80018a8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d10c      	bne.n	80018a8 <osThreadNew+0xec>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d108      	bne.n	80018a8 <osThreadNew+0xec>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d104      	bne.n	80018a8 <osThreadNew+0xec>
          mem = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	623b      	str	r3, [r7, #32]
 80018a2:	e001      	b.n	80018a8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80018a8:	6a3b      	ldr	r3, [r7, #32]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d110      	bne.n	80018d0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80018b6:	9202      	str	r2, [sp, #8]
 80018b8:	9301      	str	r3, [sp, #4]
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f000 fe09 	bl	80024dc <xTaskCreateStatic>
 80018ca:	4603      	mov	r3, r0
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	e013      	b.n	80018f8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d110      	bne.n	80018f8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80018d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d8:	b29a      	uxth	r2, r3
 80018da:	f107 0310 	add.w	r3, r7, #16
 80018de:	9301      	str	r3, [sp, #4]
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f000 fe51 	bl	8002590 <xTaskCreate>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d001      	beq.n	80018f8 <osThreadNew+0x13c>
          hTask = NULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80018f8:	693b      	ldr	r3, [r7, #16]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3730      	adds	r7, #48	; 0x30
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	2000002c 	.word	0x2000002c

08001908 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001910:	f3ef 8305 	mrs	r3, IPSR
 8001914:	613b      	str	r3, [r7, #16]
  return(result);
 8001916:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001918:	2b00      	cmp	r3, #0
 800191a:	d10f      	bne.n	800193c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800191c:	f3ef 8310 	mrs	r3, PRIMASK
 8001920:	60fb      	str	r3, [r7, #12]
  return(result);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d105      	bne.n	8001934 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001928:	f3ef 8311 	mrs	r3, BASEPRI
 800192c:	60bb      	str	r3, [r7, #8]
  return(result);
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d007      	beq.n	8001944 <osDelay+0x3c>
 8001934:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <osDelay+0x58>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d103      	bne.n	8001944 <osDelay+0x3c>
    stat = osErrorISR;
 800193c:	f06f 0305 	mvn.w	r3, #5
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	e007      	b.n	8001954 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d002      	beq.n	8001954 <osDelay+0x4c>
      vTaskDelay(ticks);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 ff62 	bl	8002818 <vTaskDelay>
    }
  }

  return (stat);
 8001954:	697b      	ldr	r3, [r7, #20]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	2000002c 	.word	0x2000002c

08001964 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4a07      	ldr	r2, [pc, #28]	; (8001990 <vApplicationGetIdleTaskMemory+0x2c>)
 8001974:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	4a06      	ldr	r2, [pc, #24]	; (8001994 <vApplicationGetIdleTaskMemory+0x30>)
 800197a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2280      	movs	r2, #128	; 0x80
 8001980:	601a      	str	r2, [r3, #0]
}
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	20000030 	.word	0x20000030
 8001994:	2000008c 	.word	0x2000008c

08001998 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80019a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	4a06      	ldr	r2, [pc, #24]	; (80019c8 <vApplicationGetTimerTaskMemory+0x30>)
 80019ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019b6:	601a      	str	r2, [r3, #0]
}
 80019b8:	bf00      	nop
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	2000028c 	.word	0x2000028c
 80019c8:	200002e8 	.word	0x200002e8

080019cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f103 0208 	add.w	r2, r3, #8
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f04f 32ff 	mov.w	r2, #4294967295
 80019e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f103 0208 	add.w	r2, r3, #8
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f103 0208 	add.w	r2, r3, #8
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a26:	b480      	push	{r7}
 8001a28:	b085      	sub	sp, #20
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	1c5a      	adds	r2, r3, #1
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	601a      	str	r2, [r3, #0]
}
 8001a62:	bf00      	nop
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b085      	sub	sp, #20
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
 8001a76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a84:	d103      	bne.n	8001a8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	e00c      	b.n	8001aa8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3308      	adds	r3, #8
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	e002      	b.n	8001a9c <vListInsert+0x2e>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68ba      	ldr	r2, [r7, #8]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d2f6      	bcs.n	8001a96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	601a      	str	r2, [r3, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6892      	ldr	r2, [r2, #8]
 8001af6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6852      	ldr	r2, [r2, #4]
 8001b00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d103      	bne.n	8001b14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	1e5a      	subs	r2, r3, #1
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d109      	bne.n	8001b5c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b4c:	f383 8811 	msr	BASEPRI, r3
 8001b50:	f3bf 8f6f 	isb	sy
 8001b54:	f3bf 8f4f 	dsb	sy
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	e7fe      	b.n	8001b5a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001b5c:	f002 f80e 	bl	8003b7c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b68:	68f9      	ldr	r1, [r7, #12]
 8001b6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001b6c:	fb01 f303 	mul.w	r3, r1, r3
 8001b70:	441a      	add	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	68f9      	ldr	r1, [r7, #12]
 8001b90:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001b92:	fb01 f303 	mul.w	r3, r1, r3
 8001b96:	441a      	add	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	22ff      	movs	r2, #255	; 0xff
 8001ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	22ff      	movs	r2, #255	; 0xff
 8001ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d114      	bne.n	8001bdc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d01a      	beq.n	8001bf0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	3310      	adds	r3, #16
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f001 f8de 	bl	8002d80 <xTaskRemoveFromEventList>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d012      	beq.n	8001bf0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001bca:	4b0d      	ldr	r3, [pc, #52]	; (8001c00 <xQueueGenericReset+0xcc>)
 8001bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	f3bf 8f4f 	dsb	sy
 8001bd6:	f3bf 8f6f 	isb	sy
 8001bda:	e009      	b.n	8001bf0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	3310      	adds	r3, #16
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fef3 	bl	80019cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	3324      	adds	r3, #36	; 0x24
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff feee 	bl	80019cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001bf0:	f001 fff2 	bl	8003bd8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001bf4:	2301      	movs	r3, #1
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	e000ed04 	.word	0xe000ed04

08001c04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08e      	sub	sp, #56	; 0x38
 8001c08:	af02      	add	r7, sp, #8
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
 8001c10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d109      	bne.n	8001c2c <xQueueGenericCreateStatic+0x28>
 8001c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c1c:	f383 8811 	msr	BASEPRI, r3
 8001c20:	f3bf 8f6f 	isb	sy
 8001c24:	f3bf 8f4f 	dsb	sy
 8001c28:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c2a:	e7fe      	b.n	8001c2a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d109      	bne.n	8001c46 <xQueueGenericCreateStatic+0x42>
 8001c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c36:	f383 8811 	msr	BASEPRI, r3
 8001c3a:	f3bf 8f6f 	isb	sy
 8001c3e:	f3bf 8f4f 	dsb	sy
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
 8001c44:	e7fe      	b.n	8001c44 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d002      	beq.n	8001c52 <xQueueGenericCreateStatic+0x4e>
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <xQueueGenericCreateStatic+0x52>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <xQueueGenericCreateStatic+0x54>
 8001c56:	2300      	movs	r3, #0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d109      	bne.n	8001c70 <xQueueGenericCreateStatic+0x6c>
 8001c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c60:	f383 8811 	msr	BASEPRI, r3
 8001c64:	f3bf 8f6f 	isb	sy
 8001c68:	f3bf 8f4f 	dsb	sy
 8001c6c:	623b      	str	r3, [r7, #32]
 8001c6e:	e7fe      	b.n	8001c6e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d102      	bne.n	8001c7c <xQueueGenericCreateStatic+0x78>
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <xQueueGenericCreateStatic+0x7c>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <xQueueGenericCreateStatic+0x7e>
 8001c80:	2300      	movs	r3, #0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d109      	bne.n	8001c9a <xQueueGenericCreateStatic+0x96>
 8001c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c8a:	f383 8811 	msr	BASEPRI, r3
 8001c8e:	f3bf 8f6f 	isb	sy
 8001c92:	f3bf 8f4f 	dsb	sy
 8001c96:	61fb      	str	r3, [r7, #28]
 8001c98:	e7fe      	b.n	8001c98 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001c9a:	2350      	movs	r3, #80	; 0x50
 8001c9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	2b50      	cmp	r3, #80	; 0x50
 8001ca2:	d009      	beq.n	8001cb8 <xQueueGenericCreateStatic+0xb4>
 8001ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ca8:	f383 8811 	msr	BASEPRI, r3
 8001cac:	f3bf 8f6f 	isb	sy
 8001cb0:	f3bf 8f4f 	dsb	sy
 8001cb4:	61bb      	str	r3, [r7, #24]
 8001cb6:	e7fe      	b.n	8001cb6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001cb8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00d      	beq.n	8001ce0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001ccc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	68b9      	ldr	r1, [r7, #8]
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 f805 	bl	8001cea <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3730      	adds	r7, #48	; 0x30
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	60f8      	str	r0, [r7, #12]
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]
 8001cf6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d103      	bne.n	8001d06 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	e002      	b.n	8001d0c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001d18:	2101      	movs	r1, #1
 8001d1a:	69b8      	ldr	r0, [r7, #24]
 8001d1c:	f7ff ff0a 	bl	8001b34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	78fa      	ldrb	r2, [r7, #3]
 8001d24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001d28:	bf00      	nop
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08e      	sub	sp, #56	; 0x38
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
 8001d3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d109      	bne.n	8001d60 <xQueueGenericSend+0x30>
 8001d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d50:	f383 8811 	msr	BASEPRI, r3
 8001d54:	f3bf 8f6f 	isb	sy
 8001d58:	f3bf 8f4f 	dsb	sy
 8001d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d5e:	e7fe      	b.n	8001d5e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d103      	bne.n	8001d6e <xQueueGenericSend+0x3e>
 8001d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <xQueueGenericSend+0x42>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <xQueueGenericSend+0x44>
 8001d72:	2300      	movs	r3, #0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d109      	bne.n	8001d8c <xQueueGenericSend+0x5c>
 8001d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d7c:	f383 8811 	msr	BASEPRI, r3
 8001d80:	f3bf 8f6f 	isb	sy
 8001d84:	f3bf 8f4f 	dsb	sy
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
 8001d8a:	e7fe      	b.n	8001d8a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d103      	bne.n	8001d9a <xQueueGenericSend+0x6a>
 8001d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d101      	bne.n	8001d9e <xQueueGenericSend+0x6e>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <xQueueGenericSend+0x70>
 8001d9e:	2300      	movs	r3, #0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d109      	bne.n	8001db8 <xQueueGenericSend+0x88>
 8001da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001da8:	f383 8811 	msr	BASEPRI, r3
 8001dac:	f3bf 8f6f 	isb	sy
 8001db0:	f3bf 8f4f 	dsb	sy
 8001db4:	623b      	str	r3, [r7, #32]
 8001db6:	e7fe      	b.n	8001db6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001db8:	f001 f998 	bl	80030ec <xTaskGetSchedulerState>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d102      	bne.n	8001dc8 <xQueueGenericSend+0x98>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <xQueueGenericSend+0x9c>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <xQueueGenericSend+0x9e>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d109      	bne.n	8001de6 <xQueueGenericSend+0xb6>
 8001dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dd6:	f383 8811 	msr	BASEPRI, r3
 8001dda:	f3bf 8f6f 	isb	sy
 8001dde:	f3bf 8f4f 	dsb	sy
 8001de2:	61fb      	str	r3, [r7, #28]
 8001de4:	e7fe      	b.n	8001de4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001de6:	f001 fec9 	bl	8003b7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d302      	bcc.n	8001dfc <xQueueGenericSend+0xcc>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d129      	bne.n	8001e50 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	68b9      	ldr	r1, [r7, #8]
 8001e00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e02:	f000 f9ff 	bl	8002204 <prvCopyDataToQueue>
 8001e06:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d010      	beq.n	8001e32 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e12:	3324      	adds	r3, #36	; 0x24
 8001e14:	4618      	mov	r0, r3
 8001e16:	f000 ffb3 	bl	8002d80 <xTaskRemoveFromEventList>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d013      	beq.n	8001e48 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001e20:	4b3f      	ldr	r3, [pc, #252]	; (8001f20 <xQueueGenericSend+0x1f0>)
 8001e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	f3bf 8f4f 	dsb	sy
 8001e2c:	f3bf 8f6f 	isb	sy
 8001e30:	e00a      	b.n	8001e48 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d007      	beq.n	8001e48 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001e38:	4b39      	ldr	r3, [pc, #228]	; (8001f20 <xQueueGenericSend+0x1f0>)
 8001e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	f3bf 8f4f 	dsb	sy
 8001e44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001e48:	f001 fec6 	bl	8003bd8 <vPortExitCritical>
				return pdPASS;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e063      	b.n	8001f18 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d103      	bne.n	8001e5e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001e56:	f001 febf 	bl	8003bd8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	e05c      	b.n	8001f18 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d106      	bne.n	8001e72 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f000 ffeb 	bl	8002e44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001e72:	f001 feb1 	bl	8003bd8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001e76:	f000 fd67 	bl	8002948 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001e7a:	f001 fe7f 	bl	8003b7c <vPortEnterCritical>
 8001e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e84:	b25b      	sxtb	r3, r3
 8001e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e8a:	d103      	bne.n	8001e94 <xQueueGenericSend+0x164>
 8001e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e9a:	b25b      	sxtb	r3, r3
 8001e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea0:	d103      	bne.n	8001eaa <xQueueGenericSend+0x17a>
 8001ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001eaa:	f001 fe95 	bl	8003bd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001eae:	1d3a      	adds	r2, r7, #4
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	4611      	mov	r1, r2
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 ffda 	bl	8002e70 <xTaskCheckForTimeOut>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d124      	bne.n	8001f0c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001ec2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ec4:	f000 fa96 	bl	80023f4 <prvIsQueueFull>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d018      	beq.n	8001f00 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed0:	3310      	adds	r3, #16
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	4611      	mov	r1, r2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 ff04 	bl	8002ce4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001edc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ede:	f000 fa21 	bl	8002324 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001ee2:	f000 fd3f 	bl	8002964 <xTaskResumeAll>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f47f af7c 	bne.w	8001de6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8001eee:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <xQueueGenericSend+0x1f0>)
 8001ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	f3bf 8f4f 	dsb	sy
 8001efa:	f3bf 8f6f 	isb	sy
 8001efe:	e772      	b.n	8001de6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001f00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f02:	f000 fa0f 	bl	8002324 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001f06:	f000 fd2d 	bl	8002964 <xTaskResumeAll>
 8001f0a:	e76c      	b.n	8001de6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f0e:	f000 fa09 	bl	8002324 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001f12:	f000 fd27 	bl	8002964 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001f16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3738      	adds	r7, #56	; 0x38
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	e000ed04 	.word	0xe000ed04

08001f24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08e      	sub	sp, #56	; 0x38
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d109      	bne.n	8001f50 <xQueueGenericSendFromISR+0x2c>
 8001f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f40:	f383 8811 	msr	BASEPRI, r3
 8001f44:	f3bf 8f6f 	isb	sy
 8001f48:	f3bf 8f4f 	dsb	sy
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f4e:	e7fe      	b.n	8001f4e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d103      	bne.n	8001f5e <xQueueGenericSendFromISR+0x3a>
 8001f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <xQueueGenericSendFromISR+0x3e>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e000      	b.n	8001f64 <xQueueGenericSendFromISR+0x40>
 8001f62:	2300      	movs	r3, #0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d109      	bne.n	8001f7c <xQueueGenericSendFromISR+0x58>
 8001f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f6c:	f383 8811 	msr	BASEPRI, r3
 8001f70:	f3bf 8f6f 	isb	sy
 8001f74:	f3bf 8f4f 	dsb	sy
 8001f78:	623b      	str	r3, [r7, #32]
 8001f7a:	e7fe      	b.n	8001f7a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d103      	bne.n	8001f8a <xQueueGenericSendFromISR+0x66>
 8001f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <xQueueGenericSendFromISR+0x6a>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <xQueueGenericSendFromISR+0x6c>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d109      	bne.n	8001fa8 <xQueueGenericSendFromISR+0x84>
 8001f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f98:	f383 8811 	msr	BASEPRI, r3
 8001f9c:	f3bf 8f6f 	isb	sy
 8001fa0:	f3bf 8f4f 	dsb	sy
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	e7fe      	b.n	8001fa6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001fa8:	f001 fec4 	bl	8003d34 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001fac:	f3ef 8211 	mrs	r2, BASEPRI
 8001fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fb4:	f383 8811 	msr	BASEPRI, r3
 8001fb8:	f3bf 8f6f 	isb	sy
 8001fbc:	f3bf 8f4f 	dsb	sy
 8001fc0:	61ba      	str	r2, [r7, #24]
 8001fc2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001fc4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d302      	bcc.n	8001fda <xQueueGenericSendFromISR+0xb6>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d12c      	bne.n	8002034 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fe0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	68b9      	ldr	r1, [r7, #8]
 8001fe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fea:	f000 f90b 	bl	8002204 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001fee:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff6:	d112      	bne.n	800201e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d016      	beq.n	800202e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002002:	3324      	adds	r3, #36	; 0x24
 8002004:	4618      	mov	r0, r3
 8002006:	f000 febb 	bl	8002d80 <xTaskRemoveFromEventList>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00e      	beq.n	800202e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00b      	beq.n	800202e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	e007      	b.n	800202e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800201e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002022:	3301      	adds	r3, #1
 8002024:	b2db      	uxtb	r3, r3
 8002026:	b25a      	sxtb	r2, r3
 8002028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800202a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800202e:	2301      	movs	r3, #1
 8002030:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002032:	e001      	b.n	8002038 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002034:	2300      	movs	r3, #0
 8002036:	637b      	str	r3, [r7, #52]	; 0x34
 8002038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002044:	4618      	mov	r0, r3
 8002046:	3738      	adds	r7, #56	; 0x38
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08c      	sub	sp, #48	; 0x30
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002058:	2300      	movs	r3, #0
 800205a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002062:	2b00      	cmp	r3, #0
 8002064:	d109      	bne.n	800207a <xQueueReceive+0x2e>
	__asm volatile
 8002066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800206a:	f383 8811 	msr	BASEPRI, r3
 800206e:	f3bf 8f6f 	isb	sy
 8002072:	f3bf 8f4f 	dsb	sy
 8002076:	623b      	str	r3, [r7, #32]
 8002078:	e7fe      	b.n	8002078 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d103      	bne.n	8002088 <xQueueReceive+0x3c>
 8002080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <xQueueReceive+0x40>
 8002088:	2301      	movs	r3, #1
 800208a:	e000      	b.n	800208e <xQueueReceive+0x42>
 800208c:	2300      	movs	r3, #0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d109      	bne.n	80020a6 <xQueueReceive+0x5a>
 8002092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002096:	f383 8811 	msr	BASEPRI, r3
 800209a:	f3bf 8f6f 	isb	sy
 800209e:	f3bf 8f4f 	dsb	sy
 80020a2:	61fb      	str	r3, [r7, #28]
 80020a4:	e7fe      	b.n	80020a4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80020a6:	f001 f821 	bl	80030ec <xTaskGetSchedulerState>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d102      	bne.n	80020b6 <xQueueReceive+0x6a>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <xQueueReceive+0x6e>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <xQueueReceive+0x70>
 80020ba:	2300      	movs	r3, #0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d109      	bne.n	80020d4 <xQueueReceive+0x88>
 80020c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c4:	f383 8811 	msr	BASEPRI, r3
 80020c8:	f3bf 8f6f 	isb	sy
 80020cc:	f3bf 8f4f 	dsb	sy
 80020d0:	61bb      	str	r3, [r7, #24]
 80020d2:	e7fe      	b.n	80020d2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80020d4:	f001 fd52 	bl	8003b7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d01f      	beq.n	8002124 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80020e4:	68b9      	ldr	r1, [r7, #8]
 80020e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020e8:	f000 f8f6 	bl	80022d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	1e5a      	subs	r2, r3, #1
 80020f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00f      	beq.n	800211c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fe:	3310      	adds	r3, #16
 8002100:	4618      	mov	r0, r3
 8002102:	f000 fe3d 	bl	8002d80 <xTaskRemoveFromEventList>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d007      	beq.n	800211c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800210c:	4b3c      	ldr	r3, [pc, #240]	; (8002200 <xQueueReceive+0x1b4>)
 800210e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	f3bf 8f4f 	dsb	sy
 8002118:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800211c:	f001 fd5c 	bl	8003bd8 <vPortExitCritical>
				return pdPASS;
 8002120:	2301      	movs	r3, #1
 8002122:	e069      	b.n	80021f8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d103      	bne.n	8002132 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800212a:	f001 fd55 	bl	8003bd8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800212e:	2300      	movs	r3, #0
 8002130:	e062      	b.n	80021f8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002134:	2b00      	cmp	r3, #0
 8002136:	d106      	bne.n	8002146 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002138:	f107 0310 	add.w	r3, r7, #16
 800213c:	4618      	mov	r0, r3
 800213e:	f000 fe81 	bl	8002e44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002142:	2301      	movs	r3, #1
 8002144:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002146:	f001 fd47 	bl	8003bd8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800214a:	f000 fbfd 	bl	8002948 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800214e:	f001 fd15 	bl	8003b7c <vPortEnterCritical>
 8002152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002154:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002158:	b25b      	sxtb	r3, r3
 800215a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215e:	d103      	bne.n	8002168 <xQueueReceive+0x11c>
 8002160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800216e:	b25b      	sxtb	r3, r3
 8002170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002174:	d103      	bne.n	800217e <xQueueReceive+0x132>
 8002176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800217e:	f001 fd2b 	bl	8003bd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002182:	1d3a      	adds	r2, r7, #4
 8002184:	f107 0310 	add.w	r3, r7, #16
 8002188:	4611      	mov	r1, r2
 800218a:	4618      	mov	r0, r3
 800218c:	f000 fe70 	bl	8002e70 <xTaskCheckForTimeOut>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d123      	bne.n	80021de <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002196:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002198:	f000 f916 	bl	80023c8 <prvIsQueueEmpty>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d017      	beq.n	80021d2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80021a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a4:	3324      	adds	r3, #36	; 0x24
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	4611      	mov	r1, r2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 fd9a 	bl	8002ce4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80021b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021b2:	f000 f8b7 	bl	8002324 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80021b6:	f000 fbd5 	bl	8002964 <xTaskResumeAll>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d189      	bne.n	80020d4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80021c0:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <xQueueReceive+0x1b4>)
 80021c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	f3bf 8f4f 	dsb	sy
 80021cc:	f3bf 8f6f 	isb	sy
 80021d0:	e780      	b.n	80020d4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80021d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021d4:	f000 f8a6 	bl	8002324 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80021d8:	f000 fbc4 	bl	8002964 <xTaskResumeAll>
 80021dc:	e77a      	b.n	80020d4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80021de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021e0:	f000 f8a0 	bl	8002324 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80021e4:	f000 fbbe 	bl	8002964 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80021e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021ea:	f000 f8ed 	bl	80023c8 <prvIsQueueEmpty>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f43f af6f 	beq.w	80020d4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80021f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3730      	adds	r7, #48	; 0x30
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	e000ed04 	.word	0xe000ed04

08002204 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002218:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10d      	bne.n	800223e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d14d      	bne.n	80022c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	4618      	mov	r0, r3
 8002230:	f000 ff7a 	bl	8003128 <xTaskPriorityDisinherit>
 8002234:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	e043      	b.n	80022c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d119      	bne.n	8002278 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6858      	ldr	r0, [r3, #4]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	461a      	mov	r2, r3
 800224e:	68b9      	ldr	r1, [r7, #8]
 8002250:	f001 ffa8 	bl	80041a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225c:	441a      	add	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	429a      	cmp	r2, r3
 800226c:	d32b      	bcc.n	80022c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	e026      	b.n	80022c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	68d8      	ldr	r0, [r3, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	461a      	mov	r2, r3
 8002282:	68b9      	ldr	r1, [r7, #8]
 8002284:	f001 ff8e 	bl	80041a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	68da      	ldr	r2, [r3, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	425b      	negs	r3, r3
 8002292:	441a      	add	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d207      	bcs.n	80022b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	425b      	negs	r3, r3
 80022ae:	441a      	add	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d105      	bne.n	80022c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d002      	beq.n	80022c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80022ce:	697b      	ldr	r3, [r7, #20]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d018      	beq.n	800231c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	441a      	add	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	429a      	cmp	r2, r3
 8002302:	d303      	bcc.n	800230c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68d9      	ldr	r1, [r3, #12]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002314:	461a      	mov	r2, r3
 8002316:	6838      	ldr	r0, [r7, #0]
 8002318:	f001 ff44 	bl	80041a4 <memcpy>
	}
}
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800232c:	f001 fc26 	bl	8003b7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002336:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002338:	e011      	b.n	800235e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	2b00      	cmp	r3, #0
 8002340:	d012      	beq.n	8002368 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3324      	adds	r3, #36	; 0x24
 8002346:	4618      	mov	r0, r3
 8002348:	f000 fd1a 	bl	8002d80 <xTaskRemoveFromEventList>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002352:	f000 fded 	bl	8002f30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	3b01      	subs	r3, #1
 800235a:	b2db      	uxtb	r3, r3
 800235c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800235e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002362:	2b00      	cmp	r3, #0
 8002364:	dce9      	bgt.n	800233a <prvUnlockQueue+0x16>
 8002366:	e000      	b.n	800236a <prvUnlockQueue+0x46>
					break;
 8002368:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	22ff      	movs	r2, #255	; 0xff
 800236e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002372:	f001 fc31 	bl	8003bd8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002376:	f001 fc01 	bl	8003b7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002380:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002382:	e011      	b.n	80023a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d012      	beq.n	80023b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3310      	adds	r3, #16
 8002390:	4618      	mov	r0, r3
 8002392:	f000 fcf5 	bl	8002d80 <xTaskRemoveFromEventList>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800239c:	f000 fdc8 	bl	8002f30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80023a0:	7bbb      	ldrb	r3, [r7, #14]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80023a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	dce9      	bgt.n	8002384 <prvUnlockQueue+0x60>
 80023b0:	e000      	b.n	80023b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80023b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	22ff      	movs	r2, #255	; 0xff
 80023b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80023bc:	f001 fc0c 	bl	8003bd8 <vPortExitCritical>
}
 80023c0:	bf00      	nop
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80023d0:	f001 fbd4 	bl	8003b7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d102      	bne.n	80023e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80023dc:	2301      	movs	r3, #1
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	e001      	b.n	80023e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80023e6:	f001 fbf7 	bl	8003bd8 <vPortExitCritical>

	return xReturn;
 80023ea:	68fb      	ldr	r3, [r7, #12]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80023fc:	f001 fbbe 	bl	8003b7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002408:	429a      	cmp	r2, r3
 800240a:	d102      	bne.n	8002412 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800240c:	2301      	movs	r3, #1
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	e001      	b.n	8002416 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002416:	f001 fbdf 	bl	8003bd8 <vPortExitCritical>

	return xReturn;
 800241a:	68fb      	ldr	r3, [r7, #12]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800242e:	2300      	movs	r3, #0
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	e014      	b.n	800245e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002434:	4a0e      	ldr	r2, [pc, #56]	; (8002470 <vQueueAddToRegistry+0x4c>)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10b      	bne.n	8002458 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002440:	490b      	ldr	r1, [pc, #44]	; (8002470 <vQueueAddToRegistry+0x4c>)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800244a:	4a09      	ldr	r2, [pc, #36]	; (8002470 <vQueueAddToRegistry+0x4c>)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4413      	add	r3, r2
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002456:	e005      	b.n	8002464 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	3301      	adds	r3, #1
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2b07      	cmp	r3, #7
 8002462:	d9e7      	bls.n	8002434 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002464:	bf00      	nop
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	20004944 	.word	0x20004944

08002474 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002484:	f001 fb7a 	bl	8003b7c <vPortEnterCritical>
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800248e:	b25b      	sxtb	r3, r3
 8002490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002494:	d103      	bne.n	800249e <vQueueWaitForMessageRestricted+0x2a>
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024a4:	b25b      	sxtb	r3, r3
 80024a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024aa:	d103      	bne.n	80024b4 <vQueueWaitForMessageRestricted+0x40>
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024b4:	f001 fb90 	bl	8003bd8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d106      	bne.n	80024ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	3324      	adds	r3, #36	; 0x24
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	68b9      	ldr	r1, [r7, #8]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 fc2f 	bl	8002d2c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80024ce:	6978      	ldr	r0, [r7, #20]
 80024d0:	f7ff ff28 	bl	8002324 <prvUnlockQueue>
	}
 80024d4:	bf00      	nop
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08e      	sub	sp, #56	; 0x38
 80024e0:	af04      	add	r7, sp, #16
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
 80024e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80024ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d109      	bne.n	8002504 <xTaskCreateStatic+0x28>
 80024f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f4:	f383 8811 	msr	BASEPRI, r3
 80024f8:	f3bf 8f6f 	isb	sy
 80024fc:	f3bf 8f4f 	dsb	sy
 8002500:	623b      	str	r3, [r7, #32]
 8002502:	e7fe      	b.n	8002502 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002506:	2b00      	cmp	r3, #0
 8002508:	d109      	bne.n	800251e <xTaskCreateStatic+0x42>
 800250a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800250e:	f383 8811 	msr	BASEPRI, r3
 8002512:	f3bf 8f6f 	isb	sy
 8002516:	f3bf 8f4f 	dsb	sy
 800251a:	61fb      	str	r3, [r7, #28]
 800251c:	e7fe      	b.n	800251c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800251e:	235c      	movs	r3, #92	; 0x5c
 8002520:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	2b5c      	cmp	r3, #92	; 0x5c
 8002526:	d009      	beq.n	800253c <xTaskCreateStatic+0x60>
 8002528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800252c:	f383 8811 	msr	BASEPRI, r3
 8002530:	f3bf 8f6f 	isb	sy
 8002534:	f3bf 8f4f 	dsb	sy
 8002538:	61bb      	str	r3, [r7, #24]
 800253a:	e7fe      	b.n	800253a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800253c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800253e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002540:	2b00      	cmp	r3, #0
 8002542:	d01e      	beq.n	8002582 <xTaskCreateStatic+0xa6>
 8002544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002546:	2b00      	cmp	r3, #0
 8002548:	d01b      	beq.n	8002582 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800254a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002552:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	2202      	movs	r2, #2
 8002558:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800255c:	2300      	movs	r3, #0
 800255e:	9303      	str	r3, [sp, #12]
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	9302      	str	r3, [sp, #8]
 8002564:	f107 0314 	add.w	r3, r7, #20
 8002568:	9301      	str	r3, [sp, #4]
 800256a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	68b9      	ldr	r1, [r7, #8]
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 f850 	bl	800261a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800257a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800257c:	f000 f8dc 	bl	8002738 <prvAddNewTaskToReadyList>
 8002580:	e001      	b.n	8002586 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002586:	697b      	ldr	r3, [r7, #20]
	}
 8002588:	4618      	mov	r0, r3
 800258a:	3728      	adds	r7, #40	; 0x28
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08c      	sub	sp, #48	; 0x30
 8002594:	af04      	add	r7, sp, #16
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	603b      	str	r3, [r7, #0]
 800259c:	4613      	mov	r3, r2
 800259e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80025a0:	88fb      	ldrh	r3, [r7, #6]
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4618      	mov	r0, r3
 80025a6:	f001 fc03 	bl	8003db0 <pvPortMalloc>
 80025aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00e      	beq.n	80025d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80025b2:	205c      	movs	r0, #92	; 0x5c
 80025b4:	f001 fbfc 	bl	8003db0 <pvPortMalloc>
 80025b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	631a      	str	r2, [r3, #48]	; 0x30
 80025c6:	e005      	b.n	80025d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80025c8:	6978      	ldr	r0, [r7, #20]
 80025ca:	f001 fcb3 	bl	8003f34 <vPortFree>
 80025ce:	e001      	b.n	80025d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d017      	beq.n	800260a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80025e2:	88fa      	ldrh	r2, [r7, #6]
 80025e4:	2300      	movs	r3, #0
 80025e6:	9303      	str	r3, [sp, #12]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	9302      	str	r3, [sp, #8]
 80025ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ee:	9301      	str	r3, [sp, #4]
 80025f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	68b9      	ldr	r1, [r7, #8]
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 f80e 	bl	800261a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80025fe:	69f8      	ldr	r0, [r7, #28]
 8002600:	f000 f89a 	bl	8002738 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002604:	2301      	movs	r3, #1
 8002606:	61bb      	str	r3, [r7, #24]
 8002608:	e002      	b.n	8002610 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800260a:	f04f 33ff 	mov.w	r3, #4294967295
 800260e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002610:	69bb      	ldr	r3, [r7, #24]
	}
 8002612:	4618      	mov	r0, r3
 8002614:	3720      	adds	r7, #32
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b088      	sub	sp, #32
 800261e:	af00      	add	r7, sp, #0
 8002620:	60f8      	str	r0, [r7, #12]
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	607a      	str	r2, [r7, #4]
 8002626:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	461a      	mov	r2, r3
 8002632:	21a5      	movs	r1, #165	; 0xa5
 8002634:	f001 fdc1 	bl	80041ba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002642:	3b01      	subs	r3, #1
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	f023 0307 	bic.w	r3, r3, #7
 8002650:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	2b00      	cmp	r3, #0
 800265a:	d009      	beq.n	8002670 <prvInitialiseNewTask+0x56>
 800265c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002660:	f383 8811 	msr	BASEPRI, r3
 8002664:	f3bf 8f6f 	isb	sy
 8002668:	f3bf 8f4f 	dsb	sy
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	e7fe      	b.n	800266e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d01f      	beq.n	80026b6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
 800267a:	e012      	b.n	80026a2 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800267c:	68ba      	ldr	r2, [r7, #8]
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	4413      	add	r3, r2
 8002682:	7819      	ldrb	r1, [r3, #0]
 8002684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	4413      	add	r3, r2
 800268a:	3334      	adds	r3, #52	; 0x34
 800268c:	460a      	mov	r2, r1
 800268e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	4413      	add	r3, r2
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d006      	beq.n	80026aa <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	3301      	adds	r3, #1
 80026a0:	61fb      	str	r3, [r7, #28]
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	2b0f      	cmp	r3, #15
 80026a6:	d9e9      	bls.n	800267c <prvInitialiseNewTask+0x62>
 80026a8:	e000      	b.n	80026ac <prvInitialiseNewTask+0x92>
			{
				break;
 80026aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80026ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026b4:	e003      	b.n	80026be <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80026b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80026be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c0:	2b37      	cmp	r3, #55	; 0x37
 80026c2:	d901      	bls.n	80026c8 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80026c4:	2337      	movs	r3, #55	; 0x37
 80026c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80026c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80026ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80026d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d6:	2200      	movs	r2, #0
 80026d8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80026da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026dc:	3304      	adds	r3, #4
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff f994 	bl	8001a0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80026e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e6:	3318      	adds	r3, #24
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff f98f 	bl	8001a0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80026ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80026fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80026fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002702:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002706:	2200      	movs	r2, #0
 8002708:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800270a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	68f9      	ldr	r1, [r7, #12]
 8002716:	69b8      	ldr	r0, [r7, #24]
 8002718:	f001 f90c 	bl	8003934 <pxPortInitialiseStack>
 800271c:	4602      	mov	r2, r0
 800271e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002720:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800272c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800272e:	bf00      	nop
 8002730:	3720      	adds	r7, #32
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002740:	f001 fa1c 	bl	8003b7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002744:	4b2d      	ldr	r3, [pc, #180]	; (80027fc <prvAddNewTaskToReadyList+0xc4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	3301      	adds	r3, #1
 800274a:	4a2c      	ldr	r2, [pc, #176]	; (80027fc <prvAddNewTaskToReadyList+0xc4>)
 800274c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800274e:	4b2c      	ldr	r3, [pc, #176]	; (8002800 <prvAddNewTaskToReadyList+0xc8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d109      	bne.n	800276a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002756:	4a2a      	ldr	r2, [pc, #168]	; (8002800 <prvAddNewTaskToReadyList+0xc8>)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800275c:	4b27      	ldr	r3, [pc, #156]	; (80027fc <prvAddNewTaskToReadyList+0xc4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d110      	bne.n	8002786 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002764:	f000 fc08 	bl	8002f78 <prvInitialiseTaskLists>
 8002768:	e00d      	b.n	8002786 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800276a:	4b26      	ldr	r3, [pc, #152]	; (8002804 <prvAddNewTaskToReadyList+0xcc>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d109      	bne.n	8002786 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002772:	4b23      	ldr	r3, [pc, #140]	; (8002800 <prvAddNewTaskToReadyList+0xc8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277c:	429a      	cmp	r2, r3
 800277e:	d802      	bhi.n	8002786 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002780:	4a1f      	ldr	r2, [pc, #124]	; (8002800 <prvAddNewTaskToReadyList+0xc8>)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002786:	4b20      	ldr	r3, [pc, #128]	; (8002808 <prvAddNewTaskToReadyList+0xd0>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	3301      	adds	r3, #1
 800278c:	4a1e      	ldr	r2, [pc, #120]	; (8002808 <prvAddNewTaskToReadyList+0xd0>)
 800278e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002790:	4b1d      	ldr	r3, [pc, #116]	; (8002808 <prvAddNewTaskToReadyList+0xd0>)
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800279c:	4b1b      	ldr	r3, [pc, #108]	; (800280c <prvAddNewTaskToReadyList+0xd4>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d903      	bls.n	80027ac <prvAddNewTaskToReadyList+0x74>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a8:	4a18      	ldr	r2, [pc, #96]	; (800280c <prvAddNewTaskToReadyList+0xd4>)
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4a15      	ldr	r2, [pc, #84]	; (8002810 <prvAddNewTaskToReadyList+0xd8>)
 80027ba:	441a      	add	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3304      	adds	r3, #4
 80027c0:	4619      	mov	r1, r3
 80027c2:	4610      	mov	r0, r2
 80027c4:	f7ff f92f 	bl	8001a26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80027c8:	f001 fa06 	bl	8003bd8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80027cc:	4b0d      	ldr	r3, [pc, #52]	; (8002804 <prvAddNewTaskToReadyList+0xcc>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00e      	beq.n	80027f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80027d4:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <prvAddNewTaskToReadyList+0xc8>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027de:	429a      	cmp	r2, r3
 80027e0:	d207      	bcs.n	80027f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80027e2:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <prvAddNewTaskToReadyList+0xdc>)
 80027e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	f3bf 8f4f 	dsb	sy
 80027ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000bbc 	.word	0x20000bbc
 8002800:	200006e8 	.word	0x200006e8
 8002804:	20000bc8 	.word	0x20000bc8
 8002808:	20000bd8 	.word	0x20000bd8
 800280c:	20000bc4 	.word	0x20000bc4
 8002810:	200006ec 	.word	0x200006ec
 8002814:	e000ed04 	.word	0xe000ed04

08002818 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002820:	2300      	movs	r3, #0
 8002822:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d016      	beq.n	8002858 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800282a:	4b13      	ldr	r3, [pc, #76]	; (8002878 <vTaskDelay+0x60>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d009      	beq.n	8002846 <vTaskDelay+0x2e>
 8002832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002836:	f383 8811 	msr	BASEPRI, r3
 800283a:	f3bf 8f6f 	isb	sy
 800283e:	f3bf 8f4f 	dsb	sy
 8002842:	60bb      	str	r3, [r7, #8]
 8002844:	e7fe      	b.n	8002844 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002846:	f000 f87f 	bl	8002948 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800284a:	2100      	movs	r1, #0
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 fcd7 	bl	8003200 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002852:	f000 f887 	bl	8002964 <xTaskResumeAll>
 8002856:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d107      	bne.n	800286e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800285e:	4b07      	ldr	r3, [pc, #28]	; (800287c <vTaskDelay+0x64>)
 8002860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	f3bf 8f4f 	dsb	sy
 800286a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800286e:	bf00      	nop
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20000be4 	.word	0x20000be4
 800287c:	e000ed04 	.word	0xe000ed04

08002880 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08a      	sub	sp, #40	; 0x28
 8002884:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002886:	2300      	movs	r3, #0
 8002888:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800288a:	2300      	movs	r3, #0
 800288c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800288e:	463a      	mov	r2, r7
 8002890:	1d39      	adds	r1, r7, #4
 8002892:	f107 0308 	add.w	r3, r7, #8
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff f864 	bl	8001964 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800289c:	6839      	ldr	r1, [r7, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	9202      	str	r2, [sp, #8]
 80028a4:	9301      	str	r3, [sp, #4]
 80028a6:	2300      	movs	r3, #0
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	2300      	movs	r3, #0
 80028ac:	460a      	mov	r2, r1
 80028ae:	4920      	ldr	r1, [pc, #128]	; (8002930 <vTaskStartScheduler+0xb0>)
 80028b0:	4820      	ldr	r0, [pc, #128]	; (8002934 <vTaskStartScheduler+0xb4>)
 80028b2:	f7ff fe13 	bl	80024dc <xTaskCreateStatic>
 80028b6:	4602      	mov	r2, r0
 80028b8:	4b1f      	ldr	r3, [pc, #124]	; (8002938 <vTaskStartScheduler+0xb8>)
 80028ba:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80028bc:	4b1e      	ldr	r3, [pc, #120]	; (8002938 <vTaskStartScheduler+0xb8>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d002      	beq.n	80028ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80028c4:	2301      	movs	r3, #1
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	e001      	b.n	80028ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d102      	bne.n	80028da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80028d4:	f000 fce8 	bl	80032a8 <xTimerCreateTimerTask>
 80028d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d115      	bne.n	800290c <vTaskStartScheduler+0x8c>
 80028e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e4:	f383 8811 	msr	BASEPRI, r3
 80028e8:	f3bf 8f6f 	isb	sy
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80028f2:	4b12      	ldr	r3, [pc, #72]	; (800293c <vTaskStartScheduler+0xbc>)
 80028f4:	f04f 32ff 	mov.w	r2, #4294967295
 80028f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80028fa:	4b11      	ldr	r3, [pc, #68]	; (8002940 <vTaskStartScheduler+0xc0>)
 80028fc:	2201      	movs	r2, #1
 80028fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002900:	4b10      	ldr	r3, [pc, #64]	; (8002944 <vTaskStartScheduler+0xc4>)
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002906:	f001 f89b 	bl	8003a40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800290a:	e00d      	b.n	8002928 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002912:	d109      	bne.n	8002928 <vTaskStartScheduler+0xa8>
 8002914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002918:	f383 8811 	msr	BASEPRI, r3
 800291c:	f3bf 8f6f 	isb	sy
 8002920:	f3bf 8f4f 	dsb	sy
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	e7fe      	b.n	8002926 <vTaskStartScheduler+0xa6>
}
 8002928:	bf00      	nop
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	08004208 	.word	0x08004208
 8002934:	08002f49 	.word	0x08002f49
 8002938:	20000be0 	.word	0x20000be0
 800293c:	20000bdc 	.word	0x20000bdc
 8002940:	20000bc8 	.word	0x20000bc8
 8002944:	20000bc0 	.word	0x20000bc0

08002948 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800294c:	4b04      	ldr	r3, [pc, #16]	; (8002960 <vTaskSuspendAll+0x18>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	3301      	adds	r3, #1
 8002952:	4a03      	ldr	r2, [pc, #12]	; (8002960 <vTaskSuspendAll+0x18>)
 8002954:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002956:	bf00      	nop
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	20000be4 	.word	0x20000be4

08002964 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800296a:	2300      	movs	r3, #0
 800296c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800296e:	2300      	movs	r3, #0
 8002970:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002972:	4b41      	ldr	r3, [pc, #260]	; (8002a78 <xTaskResumeAll+0x114>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d109      	bne.n	800298e <xTaskResumeAll+0x2a>
 800297a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800297e:	f383 8811 	msr	BASEPRI, r3
 8002982:	f3bf 8f6f 	isb	sy
 8002986:	f3bf 8f4f 	dsb	sy
 800298a:	603b      	str	r3, [r7, #0]
 800298c:	e7fe      	b.n	800298c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800298e:	f001 f8f5 	bl	8003b7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002992:	4b39      	ldr	r3, [pc, #228]	; (8002a78 <xTaskResumeAll+0x114>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	3b01      	subs	r3, #1
 8002998:	4a37      	ldr	r2, [pc, #220]	; (8002a78 <xTaskResumeAll+0x114>)
 800299a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800299c:	4b36      	ldr	r3, [pc, #216]	; (8002a78 <xTaskResumeAll+0x114>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d162      	bne.n	8002a6a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80029a4:	4b35      	ldr	r3, [pc, #212]	; (8002a7c <xTaskResumeAll+0x118>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d05e      	beq.n	8002a6a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029ac:	e02f      	b.n	8002a0e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029ae:	4b34      	ldr	r3, [pc, #208]	; (8002a80 <xTaskResumeAll+0x11c>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	3318      	adds	r3, #24
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff f890 	bl	8001ae0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	3304      	adds	r3, #4
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff f88b 	bl	8001ae0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ce:	4b2d      	ldr	r3, [pc, #180]	; (8002a84 <xTaskResumeAll+0x120>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d903      	bls.n	80029de <xTaskResumeAll+0x7a>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029da:	4a2a      	ldr	r2, [pc, #168]	; (8002a84 <xTaskResumeAll+0x120>)
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e2:	4613      	mov	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4a27      	ldr	r2, [pc, #156]	; (8002a88 <xTaskResumeAll+0x124>)
 80029ec:	441a      	add	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	3304      	adds	r3, #4
 80029f2:	4619      	mov	r1, r3
 80029f4:	4610      	mov	r0, r2
 80029f6:	f7ff f816 	bl	8001a26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029fe:	4b23      	ldr	r3, [pc, #140]	; (8002a8c <xTaskResumeAll+0x128>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d302      	bcc.n	8002a0e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002a08:	4b21      	ldr	r3, [pc, #132]	; (8002a90 <xTaskResumeAll+0x12c>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a0e:	4b1c      	ldr	r3, [pc, #112]	; (8002a80 <xTaskResumeAll+0x11c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1cb      	bne.n	80029ae <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002a1c:	f000 fb46 	bl	80030ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002a20:	4b1c      	ldr	r3, [pc, #112]	; (8002a94 <xTaskResumeAll+0x130>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d010      	beq.n	8002a4e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002a2c:	f000 f846 	bl	8002abc <xTaskIncrementTick>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d002      	beq.n	8002a3c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002a36:	4b16      	ldr	r3, [pc, #88]	; (8002a90 <xTaskResumeAll+0x12c>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1f1      	bne.n	8002a2c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002a48:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <xTaskResumeAll+0x130>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002a4e:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <xTaskResumeAll+0x12c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d009      	beq.n	8002a6a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002a56:	2301      	movs	r3, #1
 8002a58:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002a5a:	4b0f      	ldr	r3, [pc, #60]	; (8002a98 <xTaskResumeAll+0x134>)
 8002a5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	f3bf 8f4f 	dsb	sy
 8002a66:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002a6a:	f001 f8b5 	bl	8003bd8 <vPortExitCritical>

	return xAlreadyYielded;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	20000be4 	.word	0x20000be4
 8002a7c:	20000bbc 	.word	0x20000bbc
 8002a80:	20000b7c 	.word	0x20000b7c
 8002a84:	20000bc4 	.word	0x20000bc4
 8002a88:	200006ec 	.word	0x200006ec
 8002a8c:	200006e8 	.word	0x200006e8
 8002a90:	20000bd0 	.word	0x20000bd0
 8002a94:	20000bcc 	.word	0x20000bcc
 8002a98:	e000ed04 	.word	0xe000ed04

08002a9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002aa2:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <xTaskGetTickCount+0x1c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002aa8:	687b      	ldr	r3, [r7, #4]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	20000bc0 	.word	0x20000bc0

08002abc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ac6:	4b4e      	ldr	r3, [pc, #312]	; (8002c00 <xTaskIncrementTick+0x144>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f040 8088 	bne.w	8002be0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ad0:	4b4c      	ldr	r3, [pc, #304]	; (8002c04 <xTaskIncrementTick+0x148>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002ad8:	4a4a      	ldr	r2, [pc, #296]	; (8002c04 <xTaskIncrementTick+0x148>)
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d11f      	bne.n	8002b24 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002ae4:	4b48      	ldr	r3, [pc, #288]	; (8002c08 <xTaskIncrementTick+0x14c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d009      	beq.n	8002b02 <xTaskIncrementTick+0x46>
 8002aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af2:	f383 8811 	msr	BASEPRI, r3
 8002af6:	f3bf 8f6f 	isb	sy
 8002afa:	f3bf 8f4f 	dsb	sy
 8002afe:	603b      	str	r3, [r7, #0]
 8002b00:	e7fe      	b.n	8002b00 <xTaskIncrementTick+0x44>
 8002b02:	4b41      	ldr	r3, [pc, #260]	; (8002c08 <xTaskIncrementTick+0x14c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	4b40      	ldr	r3, [pc, #256]	; (8002c0c <xTaskIncrementTick+0x150>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a3e      	ldr	r2, [pc, #248]	; (8002c08 <xTaskIncrementTick+0x14c>)
 8002b0e:	6013      	str	r3, [r2, #0]
 8002b10:	4a3e      	ldr	r2, [pc, #248]	; (8002c0c <xTaskIncrementTick+0x150>)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	4b3e      	ldr	r3, [pc, #248]	; (8002c10 <xTaskIncrementTick+0x154>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	4a3c      	ldr	r2, [pc, #240]	; (8002c10 <xTaskIncrementTick+0x154>)
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	f000 fac4 	bl	80030ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002b24:	4b3b      	ldr	r3, [pc, #236]	; (8002c14 <xTaskIncrementTick+0x158>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d349      	bcc.n	8002bc2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b2e:	4b36      	ldr	r3, [pc, #216]	; (8002c08 <xTaskIncrementTick+0x14c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d104      	bne.n	8002b42 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b38:	4b36      	ldr	r3, [pc, #216]	; (8002c14 <xTaskIncrementTick+0x158>)
 8002b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b3e:	601a      	str	r2, [r3, #0]
					break;
 8002b40:	e03f      	b.n	8002bc2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b42:	4b31      	ldr	r3, [pc, #196]	; (8002c08 <xTaskIncrementTick+0x14c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d203      	bcs.n	8002b62 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002b5a:	4a2e      	ldr	r2, [pc, #184]	; (8002c14 <xTaskIncrementTick+0x158>)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002b60:	e02f      	b.n	8002bc2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	3304      	adds	r3, #4
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe ffba 	bl	8001ae0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d004      	beq.n	8002b7e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	3318      	adds	r3, #24
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fe ffb1 	bl	8001ae0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b82:	4b25      	ldr	r3, [pc, #148]	; (8002c18 <xTaskIncrementTick+0x15c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d903      	bls.n	8002b92 <xTaskIncrementTick+0xd6>
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8e:	4a22      	ldr	r2, [pc, #136]	; (8002c18 <xTaskIncrementTick+0x15c>)
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b96:	4613      	mov	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4a1f      	ldr	r2, [pc, #124]	; (8002c1c <xTaskIncrementTick+0x160>)
 8002ba0:	441a      	add	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4610      	mov	r0, r2
 8002baa:	f7fe ff3c 	bl	8001a26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bb2:	4b1b      	ldr	r3, [pc, #108]	; (8002c20 <xTaskIncrementTick+0x164>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d3b8      	bcc.n	8002b2e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bc0:	e7b5      	b.n	8002b2e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002bc2:	4b17      	ldr	r3, [pc, #92]	; (8002c20 <xTaskIncrementTick+0x164>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc8:	4914      	ldr	r1, [pc, #80]	; (8002c1c <xTaskIncrementTick+0x160>)
 8002bca:	4613      	mov	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d907      	bls.n	8002bea <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	e004      	b.n	8002bea <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002be0:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <xTaskIncrementTick+0x168>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	3301      	adds	r3, #1
 8002be6:	4a0f      	ldr	r2, [pc, #60]	; (8002c24 <xTaskIncrementTick+0x168>)
 8002be8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002bea:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <xTaskIncrementTick+0x16c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002bf6:	697b      	ldr	r3, [r7, #20]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	20000be4 	.word	0x20000be4
 8002c04:	20000bc0 	.word	0x20000bc0
 8002c08:	20000b74 	.word	0x20000b74
 8002c0c:	20000b78 	.word	0x20000b78
 8002c10:	20000bd4 	.word	0x20000bd4
 8002c14:	20000bdc 	.word	0x20000bdc
 8002c18:	20000bc4 	.word	0x20000bc4
 8002c1c:	200006ec 	.word	0x200006ec
 8002c20:	200006e8 	.word	0x200006e8
 8002c24:	20000bcc 	.word	0x20000bcc
 8002c28:	20000bd0 	.word	0x20000bd0

08002c2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c32:	4b27      	ldr	r3, [pc, #156]	; (8002cd0 <vTaskSwitchContext+0xa4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002c3a:	4b26      	ldr	r3, [pc, #152]	; (8002cd4 <vTaskSwitchContext+0xa8>)
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002c40:	e040      	b.n	8002cc4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8002c42:	4b24      	ldr	r3, [pc, #144]	; (8002cd4 <vTaskSwitchContext+0xa8>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c48:	4b23      	ldr	r3, [pc, #140]	; (8002cd8 <vTaskSwitchContext+0xac>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	e00f      	b.n	8002c70 <vTaskSwitchContext+0x44>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d109      	bne.n	8002c6a <vTaskSwitchContext+0x3e>
 8002c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5a:	f383 8811 	msr	BASEPRI, r3
 8002c5e:	f3bf 8f6f 	isb	sy
 8002c62:	f3bf 8f4f 	dsb	sy
 8002c66:	607b      	str	r3, [r7, #4]
 8002c68:	e7fe      	b.n	8002c68 <vTaskSwitchContext+0x3c>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	491a      	ldr	r1, [pc, #104]	; (8002cdc <vTaskSwitchContext+0xb0>)
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	4613      	mov	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0e5      	beq.n	8002c50 <vTaskSwitchContext+0x24>
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4a13      	ldr	r2, [pc, #76]	; (8002cdc <vTaskSwitchContext+0xb0>)
 8002c90:	4413      	add	r3, r2
 8002c92:	60bb      	str	r3, [r7, #8]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	3308      	adds	r3, #8
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d104      	bne.n	8002cb4 <vTaskSwitchContext+0x88>
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	605a      	str	r2, [r3, #4]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	4a09      	ldr	r2, [pc, #36]	; (8002ce0 <vTaskSwitchContext+0xb4>)
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	4a06      	ldr	r2, [pc, #24]	; (8002cd8 <vTaskSwitchContext+0xac>)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6013      	str	r3, [r2, #0]
}
 8002cc4:	bf00      	nop
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	20000be4 	.word	0x20000be4
 8002cd4:	20000bd0 	.word	0x20000bd0
 8002cd8:	20000bc4 	.word	0x20000bc4
 8002cdc:	200006ec 	.word	0x200006ec
 8002ce0:	200006e8 	.word	0x200006e8

08002ce4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d109      	bne.n	8002d08 <vTaskPlaceOnEventList+0x24>
 8002cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf8:	f383 8811 	msr	BASEPRI, r3
 8002cfc:	f3bf 8f6f 	isb	sy
 8002d00:	f3bf 8f4f 	dsb	sy
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	e7fe      	b.n	8002d06 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d08:	4b07      	ldr	r3, [pc, #28]	; (8002d28 <vTaskPlaceOnEventList+0x44>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	3318      	adds	r3, #24
 8002d0e:	4619      	mov	r1, r3
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f7fe feac 	bl	8001a6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002d16:	2101      	movs	r1, #1
 8002d18:	6838      	ldr	r0, [r7, #0]
 8002d1a:	f000 fa71 	bl	8003200 <prvAddCurrentTaskToDelayedList>
}
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	200006e8 	.word	0x200006e8

08002d2c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d109      	bne.n	8002d52 <vTaskPlaceOnEventListRestricted+0x26>
 8002d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d42:	f383 8811 	msr	BASEPRI, r3
 8002d46:	f3bf 8f6f 	isb	sy
 8002d4a:	f3bf 8f4f 	dsb	sy
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	e7fe      	b.n	8002d50 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d52:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <vTaskPlaceOnEventListRestricted+0x50>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	3318      	adds	r3, #24
 8002d58:	4619      	mov	r1, r3
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f7fe fe63 	bl	8001a26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d002      	beq.n	8002d6c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8002d66:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	68b8      	ldr	r0, [r7, #8]
 8002d70:	f000 fa46 	bl	8003200 <prvAddCurrentTaskToDelayedList>
	}
 8002d74:	bf00      	nop
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	200006e8 	.word	0x200006e8

08002d80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d109      	bne.n	8002daa <xTaskRemoveFromEventList+0x2a>
 8002d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9a:	f383 8811 	msr	BASEPRI, r3
 8002d9e:	f3bf 8f6f 	isb	sy
 8002da2:	f3bf 8f4f 	dsb	sy
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	e7fe      	b.n	8002da8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	3318      	adds	r3, #24
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fe fe96 	bl	8001ae0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002db4:	4b1d      	ldr	r3, [pc, #116]	; (8002e2c <xTaskRemoveFromEventList+0xac>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d11d      	bne.n	8002df8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	3304      	adds	r3, #4
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fe fe8d 	bl	8001ae0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dca:	4b19      	ldr	r3, [pc, #100]	; (8002e30 <xTaskRemoveFromEventList+0xb0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d903      	bls.n	8002dda <xTaskRemoveFromEventList+0x5a>
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd6:	4a16      	ldr	r2, [pc, #88]	; (8002e30 <xTaskRemoveFromEventList+0xb0>)
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dde:	4613      	mov	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4a13      	ldr	r2, [pc, #76]	; (8002e34 <xTaskRemoveFromEventList+0xb4>)
 8002de8:	441a      	add	r2, r3
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	3304      	adds	r3, #4
 8002dee:	4619      	mov	r1, r3
 8002df0:	4610      	mov	r0, r2
 8002df2:	f7fe fe18 	bl	8001a26 <vListInsertEnd>
 8002df6:	e005      	b.n	8002e04 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	3318      	adds	r3, #24
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	480e      	ldr	r0, [pc, #56]	; (8002e38 <xTaskRemoveFromEventList+0xb8>)
 8002e00:	f7fe fe11 	bl	8001a26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e08:	4b0c      	ldr	r3, [pc, #48]	; (8002e3c <xTaskRemoveFromEventList+0xbc>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d905      	bls.n	8002e1e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002e12:	2301      	movs	r3, #1
 8002e14:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002e16:	4b0a      	ldr	r3, [pc, #40]	; (8002e40 <xTaskRemoveFromEventList+0xc0>)
 8002e18:	2201      	movs	r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	e001      	b.n	8002e22 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002e22:	697b      	ldr	r3, [r7, #20]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20000be4 	.word	0x20000be4
 8002e30:	20000bc4 	.word	0x20000bc4
 8002e34:	200006ec 	.word	0x200006ec
 8002e38:	20000b7c 	.word	0x20000b7c
 8002e3c:	200006e8 	.word	0x200006e8
 8002e40:	20000bd0 	.word	0x20000bd0

08002e44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <vTaskInternalSetTimeOutState+0x24>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002e54:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <vTaskInternalSetTimeOutState+0x28>)
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	605a      	str	r2, [r3, #4]
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	20000bd4 	.word	0x20000bd4
 8002e6c:	20000bc0 	.word	0x20000bc0

08002e70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b088      	sub	sp, #32
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d109      	bne.n	8002e94 <xTaskCheckForTimeOut+0x24>
 8002e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e84:	f383 8811 	msr	BASEPRI, r3
 8002e88:	f3bf 8f6f 	isb	sy
 8002e8c:	f3bf 8f4f 	dsb	sy
 8002e90:	613b      	str	r3, [r7, #16]
 8002e92:	e7fe      	b.n	8002e92 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d109      	bne.n	8002eae <xTaskCheckForTimeOut+0x3e>
 8002e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9e:	f383 8811 	msr	BASEPRI, r3
 8002ea2:	f3bf 8f6f 	isb	sy
 8002ea6:	f3bf 8f4f 	dsb	sy
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	e7fe      	b.n	8002eac <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8002eae:	f000 fe65 	bl	8003b7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002eb2:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <xTaskCheckForTimeOut+0xb8>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eca:	d102      	bne.n	8002ed2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	61fb      	str	r3, [r7, #28]
 8002ed0:	e023      	b.n	8002f1a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	4b15      	ldr	r3, [pc, #84]	; (8002f2c <xTaskCheckForTimeOut+0xbc>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d007      	beq.n	8002eee <xTaskCheckForTimeOut+0x7e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d302      	bcc.n	8002eee <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	61fb      	str	r3, [r7, #28]
 8002eec:	e015      	b.n	8002f1a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d20b      	bcs.n	8002f10 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	1ad2      	subs	r2, r2, r3
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f7ff ff9d 	bl	8002e44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61fb      	str	r3, [r7, #28]
 8002f0e:	e004      	b.n	8002f1a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002f16:	2301      	movs	r3, #1
 8002f18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002f1a:	f000 fe5d 	bl	8003bd8 <vPortExitCritical>

	return xReturn;
 8002f1e:	69fb      	ldr	r3, [r7, #28]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3720      	adds	r7, #32
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	20000bc0 	.word	0x20000bc0
 8002f2c:	20000bd4 	.word	0x20000bd4

08002f30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002f34:	4b03      	ldr	r3, [pc, #12]	; (8002f44 <vTaskMissedYield+0x14>)
 8002f36:	2201      	movs	r2, #1
 8002f38:	601a      	str	r2, [r3, #0]
}
 8002f3a:	bf00      	nop
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	20000bd0 	.word	0x20000bd0

08002f48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002f50:	f000 f852 	bl	8002ff8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f54:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <prvIdleTask+0x28>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d9f9      	bls.n	8002f50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002f5c:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <prvIdleTask+0x2c>)
 8002f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	f3bf 8f4f 	dsb	sy
 8002f68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002f6c:	e7f0      	b.n	8002f50 <prvIdleTask+0x8>
 8002f6e:	bf00      	nop
 8002f70:	200006ec 	.word	0x200006ec
 8002f74:	e000ed04 	.word	0xe000ed04

08002f78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f7e:	2300      	movs	r3, #0
 8002f80:	607b      	str	r3, [r7, #4]
 8002f82:	e00c      	b.n	8002f9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4a12      	ldr	r2, [pc, #72]	; (8002fd8 <prvInitialiseTaskLists+0x60>)
 8002f90:	4413      	add	r3, r2
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fe fd1a 	bl	80019cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	607b      	str	r3, [r7, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b37      	cmp	r3, #55	; 0x37
 8002fa2:	d9ef      	bls.n	8002f84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002fa4:	480d      	ldr	r0, [pc, #52]	; (8002fdc <prvInitialiseTaskLists+0x64>)
 8002fa6:	f7fe fd11 	bl	80019cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002faa:	480d      	ldr	r0, [pc, #52]	; (8002fe0 <prvInitialiseTaskLists+0x68>)
 8002fac:	f7fe fd0e 	bl	80019cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002fb0:	480c      	ldr	r0, [pc, #48]	; (8002fe4 <prvInitialiseTaskLists+0x6c>)
 8002fb2:	f7fe fd0b 	bl	80019cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002fb6:	480c      	ldr	r0, [pc, #48]	; (8002fe8 <prvInitialiseTaskLists+0x70>)
 8002fb8:	f7fe fd08 	bl	80019cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002fbc:	480b      	ldr	r0, [pc, #44]	; (8002fec <prvInitialiseTaskLists+0x74>)
 8002fbe:	f7fe fd05 	bl	80019cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002fc2:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <prvInitialiseTaskLists+0x78>)
 8002fc4:	4a05      	ldr	r2, [pc, #20]	; (8002fdc <prvInitialiseTaskLists+0x64>)
 8002fc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002fc8:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <prvInitialiseTaskLists+0x7c>)
 8002fca:	4a05      	ldr	r2, [pc, #20]	; (8002fe0 <prvInitialiseTaskLists+0x68>)
 8002fcc:	601a      	str	r2, [r3, #0]
}
 8002fce:	bf00      	nop
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	200006ec 	.word	0x200006ec
 8002fdc:	20000b4c 	.word	0x20000b4c
 8002fe0:	20000b60 	.word	0x20000b60
 8002fe4:	20000b7c 	.word	0x20000b7c
 8002fe8:	20000b90 	.word	0x20000b90
 8002fec:	20000ba8 	.word	0x20000ba8
 8002ff0:	20000b74 	.word	0x20000b74
 8002ff4:	20000b78 	.word	0x20000b78

08002ff8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ffe:	e019      	b.n	8003034 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003000:	f000 fdbc 	bl	8003b7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003004:	4b0f      	ldr	r3, [pc, #60]	; (8003044 <prvCheckTasksWaitingTermination+0x4c>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3304      	adds	r3, #4
 8003010:	4618      	mov	r0, r3
 8003012:	f7fe fd65 	bl	8001ae0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003016:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <prvCheckTasksWaitingTermination+0x50>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	3b01      	subs	r3, #1
 800301c:	4a0a      	ldr	r2, [pc, #40]	; (8003048 <prvCheckTasksWaitingTermination+0x50>)
 800301e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003020:	4b0a      	ldr	r3, [pc, #40]	; (800304c <prvCheckTasksWaitingTermination+0x54>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	3b01      	subs	r3, #1
 8003026:	4a09      	ldr	r2, [pc, #36]	; (800304c <prvCheckTasksWaitingTermination+0x54>)
 8003028:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800302a:	f000 fdd5 	bl	8003bd8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f80e 	bl	8003050 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003034:	4b05      	ldr	r3, [pc, #20]	; (800304c <prvCheckTasksWaitingTermination+0x54>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1e1      	bne.n	8003000 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800303c:	bf00      	nop
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	20000b90 	.word	0x20000b90
 8003048:	20000bbc 	.word	0x20000bbc
 800304c:	20000ba4 	.word	0x20000ba4

08003050 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800305e:	2b00      	cmp	r3, #0
 8003060:	d108      	bne.n	8003074 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	4618      	mov	r0, r3
 8003068:	f000 ff64 	bl	8003f34 <vPortFree>
				vPortFree( pxTCB );
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 ff61 	bl	8003f34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003072:	e017      	b.n	80030a4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800307a:	2b01      	cmp	r3, #1
 800307c:	d103      	bne.n	8003086 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 ff58 	bl	8003f34 <vPortFree>
	}
 8003084:	e00e      	b.n	80030a4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800308c:	2b02      	cmp	r3, #2
 800308e:	d009      	beq.n	80030a4 <prvDeleteTCB+0x54>
 8003090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003094:	f383 8811 	msr	BASEPRI, r3
 8003098:	f3bf 8f6f 	isb	sy
 800309c:	f3bf 8f4f 	dsb	sy
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	e7fe      	b.n	80030a2 <prvDeleteTCB+0x52>
	}
 80030a4:	bf00      	nop
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030b2:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <prvResetNextTaskUnblockTime+0x38>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d104      	bne.n	80030c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80030bc:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <prvResetNextTaskUnblockTime+0x3c>)
 80030be:	f04f 32ff 	mov.w	r2, #4294967295
 80030c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80030c4:	e008      	b.n	80030d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030c6:	4b07      	ldr	r3, [pc, #28]	; (80030e4 <prvResetNextTaskUnblockTime+0x38>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	4a04      	ldr	r2, [pc, #16]	; (80030e8 <prvResetNextTaskUnblockTime+0x3c>)
 80030d6:	6013      	str	r3, [r2, #0]
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	20000b74 	.word	0x20000b74
 80030e8:	20000bdc 	.word	0x20000bdc

080030ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80030f2:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <xTaskGetSchedulerState+0x34>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d102      	bne.n	8003100 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80030fa:	2301      	movs	r3, #1
 80030fc:	607b      	str	r3, [r7, #4]
 80030fe:	e008      	b.n	8003112 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003100:	4b08      	ldr	r3, [pc, #32]	; (8003124 <xTaskGetSchedulerState+0x38>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d102      	bne.n	800310e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003108:	2302      	movs	r3, #2
 800310a:	607b      	str	r3, [r7, #4]
 800310c:	e001      	b.n	8003112 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800310e:	2300      	movs	r3, #0
 8003110:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003112:	687b      	ldr	r3, [r7, #4]
	}
 8003114:	4618      	mov	r0, r3
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	20000bc8 	.word	0x20000bc8
 8003124:	20000be4 	.word	0x20000be4

08003128 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d054      	beq.n	80031e8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800313e:	4b2d      	ldr	r3, [pc, #180]	; (80031f4 <xTaskPriorityDisinherit+0xcc>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	429a      	cmp	r2, r3
 8003146:	d009      	beq.n	800315c <xTaskPriorityDisinherit+0x34>
 8003148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314c:	f383 8811 	msr	BASEPRI, r3
 8003150:	f3bf 8f6f 	isb	sy
 8003154:	f3bf 8f4f 	dsb	sy
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	e7fe      	b.n	800315a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003160:	2b00      	cmp	r3, #0
 8003162:	d109      	bne.n	8003178 <xTaskPriorityDisinherit+0x50>
 8003164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003168:	f383 8811 	msr	BASEPRI, r3
 800316c:	f3bf 8f6f 	isb	sy
 8003170:	f3bf 8f4f 	dsb	sy
 8003174:	60bb      	str	r3, [r7, #8]
 8003176:	e7fe      	b.n	8003176 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800317c:	1e5a      	subs	r2, r3, #1
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318a:	429a      	cmp	r2, r3
 800318c:	d02c      	beq.n	80031e8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003192:	2b00      	cmp	r3, #0
 8003194:	d128      	bne.n	80031e8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	3304      	adds	r3, #4
 800319a:	4618      	mov	r0, r3
 800319c:	f7fe fca0 	bl	8001ae0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b8:	4b0f      	ldr	r3, [pc, #60]	; (80031f8 <xTaskPriorityDisinherit+0xd0>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d903      	bls.n	80031c8 <xTaskPriorityDisinherit+0xa0>
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c4:	4a0c      	ldr	r2, [pc, #48]	; (80031f8 <xTaskPriorityDisinherit+0xd0>)
 80031c6:	6013      	str	r3, [r2, #0]
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4a09      	ldr	r2, [pc, #36]	; (80031fc <xTaskPriorityDisinherit+0xd4>)
 80031d6:	441a      	add	r2, r3
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	3304      	adds	r3, #4
 80031dc:	4619      	mov	r1, r3
 80031de:	4610      	mov	r0, r2
 80031e0:	f7fe fc21 	bl	8001a26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80031e4:	2301      	movs	r3, #1
 80031e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80031e8:	697b      	ldr	r3, [r7, #20]
	}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	200006e8 	.word	0x200006e8
 80031f8:	20000bc4 	.word	0x20000bc4
 80031fc:	200006ec 	.word	0x200006ec

08003200 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800320a:	4b21      	ldr	r3, [pc, #132]	; (8003290 <prvAddCurrentTaskToDelayedList+0x90>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003210:	4b20      	ldr	r3, [pc, #128]	; (8003294 <prvAddCurrentTaskToDelayedList+0x94>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	3304      	adds	r3, #4
 8003216:	4618      	mov	r0, r3
 8003218:	f7fe fc62 	bl	8001ae0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003222:	d10a      	bne.n	800323a <prvAddCurrentTaskToDelayedList+0x3a>
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d007      	beq.n	800323a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800322a:	4b1a      	ldr	r3, [pc, #104]	; (8003294 <prvAddCurrentTaskToDelayedList+0x94>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	3304      	adds	r3, #4
 8003230:	4619      	mov	r1, r3
 8003232:	4819      	ldr	r0, [pc, #100]	; (8003298 <prvAddCurrentTaskToDelayedList+0x98>)
 8003234:	f7fe fbf7 	bl	8001a26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003238:	e026      	b.n	8003288 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4413      	add	r3, r2
 8003240:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003242:	4b14      	ldr	r3, [pc, #80]	; (8003294 <prvAddCurrentTaskToDelayedList+0x94>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	429a      	cmp	r2, r3
 8003250:	d209      	bcs.n	8003266 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003252:	4b12      	ldr	r3, [pc, #72]	; (800329c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <prvAddCurrentTaskToDelayedList+0x94>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	3304      	adds	r3, #4
 800325c:	4619      	mov	r1, r3
 800325e:	4610      	mov	r0, r2
 8003260:	f7fe fc05 	bl	8001a6e <vListInsert>
}
 8003264:	e010      	b.n	8003288 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003266:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	4b0a      	ldr	r3, [pc, #40]	; (8003294 <prvAddCurrentTaskToDelayedList+0x94>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	3304      	adds	r3, #4
 8003270:	4619      	mov	r1, r3
 8003272:	4610      	mov	r0, r2
 8003274:	f7fe fbfb 	bl	8001a6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003278:	4b0a      	ldr	r3, [pc, #40]	; (80032a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	429a      	cmp	r2, r3
 8003280:	d202      	bcs.n	8003288 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003282:	4a08      	ldr	r2, [pc, #32]	; (80032a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	6013      	str	r3, [r2, #0]
}
 8003288:	bf00      	nop
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	20000bc0 	.word	0x20000bc0
 8003294:	200006e8 	.word	0x200006e8
 8003298:	20000ba8 	.word	0x20000ba8
 800329c:	20000b78 	.word	0x20000b78
 80032a0:	20000b74 	.word	0x20000b74
 80032a4:	20000bdc 	.word	0x20000bdc

080032a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08a      	sub	sp, #40	; 0x28
 80032ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80032b2:	f000 faff 	bl	80038b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80032b6:	4b1c      	ldr	r3, [pc, #112]	; (8003328 <xTimerCreateTimerTask+0x80>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d021      	beq.n	8003302 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80032c6:	1d3a      	adds	r2, r7, #4
 80032c8:	f107 0108 	add.w	r1, r7, #8
 80032cc:	f107 030c 	add.w	r3, r7, #12
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fe fb61 	bl	8001998 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	9202      	str	r2, [sp, #8]
 80032de:	9301      	str	r3, [sp, #4]
 80032e0:	2302      	movs	r3, #2
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	2300      	movs	r3, #0
 80032e6:	460a      	mov	r2, r1
 80032e8:	4910      	ldr	r1, [pc, #64]	; (800332c <xTimerCreateTimerTask+0x84>)
 80032ea:	4811      	ldr	r0, [pc, #68]	; (8003330 <xTimerCreateTimerTask+0x88>)
 80032ec:	f7ff f8f6 	bl	80024dc <xTaskCreateStatic>
 80032f0:	4602      	mov	r2, r0
 80032f2:	4b10      	ldr	r3, [pc, #64]	; (8003334 <xTimerCreateTimerTask+0x8c>)
 80032f4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80032f6:	4b0f      	ldr	r3, [pc, #60]	; (8003334 <xTimerCreateTimerTask+0x8c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80032fe:	2301      	movs	r3, #1
 8003300:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d109      	bne.n	800331c <xTimerCreateTimerTask+0x74>
 8003308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330c:	f383 8811 	msr	BASEPRI, r3
 8003310:	f3bf 8f6f 	isb	sy
 8003314:	f3bf 8f4f 	dsb	sy
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	e7fe      	b.n	800331a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800331c:	697b      	ldr	r3, [r7, #20]
}
 800331e:	4618      	mov	r0, r3
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000c18 	.word	0x20000c18
 800332c:	08004210 	.word	0x08004210
 8003330:	08003469 	.word	0x08003469
 8003334:	20000c1c 	.word	0x20000c1c

08003338 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08a      	sub	sp, #40	; 0x28
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
 8003344:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003346:	2300      	movs	r3, #0
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d109      	bne.n	8003364 <xTimerGenericCommand+0x2c>
 8003350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003354:	f383 8811 	msr	BASEPRI, r3
 8003358:	f3bf 8f6f 	isb	sy
 800335c:	f3bf 8f4f 	dsb	sy
 8003360:	623b      	str	r3, [r7, #32]
 8003362:	e7fe      	b.n	8003362 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003364:	4b19      	ldr	r3, [pc, #100]	; (80033cc <xTimerGenericCommand+0x94>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d02a      	beq.n	80033c2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	2b05      	cmp	r3, #5
 800337c:	dc18      	bgt.n	80033b0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800337e:	f7ff feb5 	bl	80030ec <xTaskGetSchedulerState>
 8003382:	4603      	mov	r3, r0
 8003384:	2b02      	cmp	r3, #2
 8003386:	d109      	bne.n	800339c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003388:	4b10      	ldr	r3, [pc, #64]	; (80033cc <xTimerGenericCommand+0x94>)
 800338a:	6818      	ldr	r0, [r3, #0]
 800338c:	f107 0110 	add.w	r1, r7, #16
 8003390:	2300      	movs	r3, #0
 8003392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003394:	f7fe fccc 	bl	8001d30 <xQueueGenericSend>
 8003398:	6278      	str	r0, [r7, #36]	; 0x24
 800339a:	e012      	b.n	80033c2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800339c:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <xTimerGenericCommand+0x94>)
 800339e:	6818      	ldr	r0, [r3, #0]
 80033a0:	f107 0110 	add.w	r1, r7, #16
 80033a4:	2300      	movs	r3, #0
 80033a6:	2200      	movs	r2, #0
 80033a8:	f7fe fcc2 	bl	8001d30 <xQueueGenericSend>
 80033ac:	6278      	str	r0, [r7, #36]	; 0x24
 80033ae:	e008      	b.n	80033c2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80033b0:	4b06      	ldr	r3, [pc, #24]	; (80033cc <xTimerGenericCommand+0x94>)
 80033b2:	6818      	ldr	r0, [r3, #0]
 80033b4:	f107 0110 	add.w	r1, r7, #16
 80033b8:	2300      	movs	r3, #0
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	f7fe fdb2 	bl	8001f24 <xQueueGenericSendFromISR>
 80033c0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3728      	adds	r7, #40	; 0x28
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	20000c18 	.word	0x20000c18

080033d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b088      	sub	sp, #32
 80033d4:	af02      	add	r7, sp, #8
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033da:	4b22      	ldr	r3, [pc, #136]	; (8003464 <prvProcessExpiredTimer+0x94>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	3304      	adds	r3, #4
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fe fb79 	bl	8001ae0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d021      	beq.n	8003440 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	699a      	ldr	r2, [r3, #24]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	18d1      	adds	r1, r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	6978      	ldr	r0, [r7, #20]
 800340a:	f000 f8d1 	bl	80035b0 <prvInsertTimerInActiveList>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d01e      	beq.n	8003452 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003414:	2300      	movs	r3, #0
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	2300      	movs	r3, #0
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	2100      	movs	r1, #0
 800341e:	6978      	ldr	r0, [r7, #20]
 8003420:	f7ff ff8a 	bl	8003338 <xTimerGenericCommand>
 8003424:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d112      	bne.n	8003452 <prvProcessExpiredTimer+0x82>
 800342c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003430:	f383 8811 	msr	BASEPRI, r3
 8003434:	f3bf 8f6f 	isb	sy
 8003438:	f3bf 8f4f 	dsb	sy
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	e7fe      	b.n	800343e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003446:	f023 0301 	bic.w	r3, r3, #1
 800344a:	b2da      	uxtb	r2, r3
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	6978      	ldr	r0, [r7, #20]
 8003458:	4798      	blx	r3
}
 800345a:	bf00      	nop
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	20000c10 	.word	0x20000c10

08003468 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003470:	f107 0308 	add.w	r3, r7, #8
 8003474:	4618      	mov	r0, r3
 8003476:	f000 f857 	bl	8003528 <prvGetNextExpireTime>
 800347a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	4619      	mov	r1, r3
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 f803 	bl	800348c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003486:	f000 f8d5 	bl	8003634 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800348a:	e7f1      	b.n	8003470 <prvTimerTask+0x8>

0800348c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003496:	f7ff fa57 	bl	8002948 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800349a:	f107 0308 	add.w	r3, r7, #8
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 f866 	bl	8003570 <prvSampleTimeNow>
 80034a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d130      	bne.n	800350e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10a      	bne.n	80034c8 <prvProcessTimerOrBlockTask+0x3c>
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d806      	bhi.n	80034c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80034ba:	f7ff fa53 	bl	8002964 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80034be:	68f9      	ldr	r1, [r7, #12]
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7ff ff85 	bl	80033d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80034c6:	e024      	b.n	8003512 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d008      	beq.n	80034e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80034ce:	4b13      	ldr	r3, [pc, #76]	; (800351c <prvProcessTimerOrBlockTask+0x90>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <prvProcessTimerOrBlockTask+0x50>
 80034d8:	2301      	movs	r3, #1
 80034da:	e000      	b.n	80034de <prvProcessTimerOrBlockTask+0x52>
 80034dc:	2300      	movs	r3, #0
 80034de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80034e0:	4b0f      	ldr	r3, [pc, #60]	; (8003520 <prvProcessTimerOrBlockTask+0x94>)
 80034e2:	6818      	ldr	r0, [r3, #0]
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	4619      	mov	r1, r3
 80034ee:	f7fe ffc1 	bl	8002474 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80034f2:	f7ff fa37 	bl	8002964 <xTaskResumeAll>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10a      	bne.n	8003512 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80034fc:	4b09      	ldr	r3, [pc, #36]	; (8003524 <prvProcessTimerOrBlockTask+0x98>)
 80034fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	f3bf 8f6f 	isb	sy
}
 800350c:	e001      	b.n	8003512 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800350e:	f7ff fa29 	bl	8002964 <xTaskResumeAll>
}
 8003512:	bf00      	nop
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	20000c14 	.word	0x20000c14
 8003520:	20000c18 	.word	0x20000c18
 8003524:	e000ed04 	.word	0xe000ed04

08003528 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003530:	4b0e      	ldr	r3, [pc, #56]	; (800356c <prvGetNextExpireTime+0x44>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <prvGetNextExpireTime+0x16>
 800353a:	2201      	movs	r2, #1
 800353c:	e000      	b.n	8003540 <prvGetNextExpireTime+0x18>
 800353e:	2200      	movs	r2, #0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d105      	bne.n	8003558 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800354c:	4b07      	ldr	r3, [pc, #28]	; (800356c <prvGetNextExpireTime+0x44>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	e001      	b.n	800355c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800355c:	68fb      	ldr	r3, [r7, #12]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	20000c10 	.word	0x20000c10

08003570 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003578:	f7ff fa90 	bl	8002a9c <xTaskGetTickCount>
 800357c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800357e:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <prvSampleTimeNow+0x3c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	429a      	cmp	r2, r3
 8003586:	d205      	bcs.n	8003594 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003588:	f000 f930 	bl	80037ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	e002      	b.n	800359a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800359a:	4a04      	ldr	r2, [pc, #16]	; (80035ac <prvSampleTimeNow+0x3c>)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80035a0:	68fb      	ldr	r3, [r7, #12]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20000c20 	.word	0x20000c20

080035b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
 80035bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80035be:	2300      	movs	r3, #0
 80035c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d812      	bhi.n	80035fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	1ad2      	subs	r2, r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d302      	bcc.n	80035ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80035e4:	2301      	movs	r3, #1
 80035e6:	617b      	str	r3, [r7, #20]
 80035e8:	e01b      	b.n	8003622 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80035ea:	4b10      	ldr	r3, [pc, #64]	; (800362c <prvInsertTimerInActiveList+0x7c>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	3304      	adds	r3, #4
 80035f2:	4619      	mov	r1, r3
 80035f4:	4610      	mov	r0, r2
 80035f6:	f7fe fa3a 	bl	8001a6e <vListInsert>
 80035fa:	e012      	b.n	8003622 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	429a      	cmp	r2, r3
 8003602:	d206      	bcs.n	8003612 <prvInsertTimerInActiveList+0x62>
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	429a      	cmp	r2, r3
 800360a:	d302      	bcc.n	8003612 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800360c:	2301      	movs	r3, #1
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	e007      	b.n	8003622 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003612:	4b07      	ldr	r3, [pc, #28]	; (8003630 <prvInsertTimerInActiveList+0x80>)
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	3304      	adds	r3, #4
 800361a:	4619      	mov	r1, r3
 800361c:	4610      	mov	r0, r2
 800361e:	f7fe fa26 	bl	8001a6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003622:	697b      	ldr	r3, [r7, #20]
}
 8003624:	4618      	mov	r0, r3
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	20000c14 	.word	0x20000c14
 8003630:	20000c10 	.word	0x20000c10

08003634 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b08e      	sub	sp, #56	; 0x38
 8003638:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800363a:	e0c6      	b.n	80037ca <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	da17      	bge.n	8003672 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003642:	1d3b      	adds	r3, r7, #4
 8003644:	3304      	adds	r3, #4
 8003646:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364a:	2b00      	cmp	r3, #0
 800364c:	d109      	bne.n	8003662 <prvProcessReceivedCommands+0x2e>
 800364e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003652:	f383 8811 	msr	BASEPRI, r3
 8003656:	f3bf 8f6f 	isb	sy
 800365a:	f3bf 8f4f 	dsb	sy
 800365e:	61fb      	str	r3, [r7, #28]
 8003660:	e7fe      	b.n	8003660 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003668:	6850      	ldr	r0, [r2, #4]
 800366a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800366c:	6892      	ldr	r2, [r2, #8]
 800366e:	4611      	mov	r1, r2
 8003670:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	f2c0 80a7 	blt.w	80037c8 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800367e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d004      	beq.n	8003690 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003688:	3304      	adds	r3, #4
 800368a:	4618      	mov	r0, r3
 800368c:	f7fe fa28 	bl	8001ae0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003690:	463b      	mov	r3, r7
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff ff6c 	bl	8003570 <prvSampleTimeNow>
 8003698:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b09      	cmp	r3, #9
 800369e:	f200 8094 	bhi.w	80037ca <prvProcessReceivedCommands+0x196>
 80036a2:	a201      	add	r2, pc, #4	; (adr r2, 80036a8 <prvProcessReceivedCommands+0x74>)
 80036a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a8:	080036d1 	.word	0x080036d1
 80036ac:	080036d1 	.word	0x080036d1
 80036b0:	080036d1 	.word	0x080036d1
 80036b4:	08003743 	.word	0x08003743
 80036b8:	08003757 	.word	0x08003757
 80036bc:	0800379f 	.word	0x0800379f
 80036c0:	080036d1 	.word	0x080036d1
 80036c4:	080036d1 	.word	0x080036d1
 80036c8:	08003743 	.word	0x08003743
 80036cc:	08003757 	.word	0x08003757
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80036d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	18d1      	adds	r1, r2, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036f0:	f7ff ff5e 	bl	80035b0 <prvInsertTimerInActiveList>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d067      	beq.n	80037ca <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003700:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003704:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d05c      	beq.n	80037ca <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	441a      	add	r2, r3
 8003718:	2300      	movs	r3, #0
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	2300      	movs	r3, #0
 800371e:	2100      	movs	r1, #0
 8003720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003722:	f7ff fe09 	bl	8003338 <xTimerGenericCommand>
 8003726:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d14d      	bne.n	80037ca <prvProcessReceivedCommands+0x196>
 800372e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003732:	f383 8811 	msr	BASEPRI, r3
 8003736:	f3bf 8f6f 	isb	sy
 800373a:	f3bf 8f4f 	dsb	sy
 800373e:	61bb      	str	r3, [r7, #24]
 8003740:	e7fe      	b.n	8003740 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003744:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003748:	f023 0301 	bic.w	r3, r3, #1
 800374c:	b2da      	uxtb	r2, r3
 800374e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003750:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003754:	e039      	b.n	80037ca <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003758:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	b2da      	uxtb	r2, r3
 8003762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003764:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800376e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <prvProcessReceivedCommands+0x156>
 8003776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377a:	f383 8811 	msr	BASEPRI, r3
 800377e:	f3bf 8f6f 	isb	sy
 8003782:	f3bf 8f4f 	dsb	sy
 8003786:	617b      	str	r3, [r7, #20]
 8003788:	e7fe      	b.n	8003788 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800378a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378c:	699a      	ldr	r2, [r3, #24]
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	18d1      	adds	r1, r2, r3
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003796:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003798:	f7ff ff0a 	bl	80035b0 <prvInsertTimerInActiveList>
					break;
 800379c:	e015      	b.n	80037ca <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800379e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d103      	bne.n	80037b4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80037ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037ae:	f000 fbc1 	bl	8003f34 <vPortFree>
 80037b2:	e00a      	b.n	80037ca <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80037b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037ba:	f023 0301 	bic.w	r3, r3, #1
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80037c6:	e000      	b.n	80037ca <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80037c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80037ca:	4b07      	ldr	r3, [pc, #28]	; (80037e8 <prvProcessReceivedCommands+0x1b4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	1d39      	adds	r1, r7, #4
 80037d0:	2200      	movs	r2, #0
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fe fc3a 	bl	800204c <xQueueReceive>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f47f af2e 	bne.w	800363c <prvProcessReceivedCommands+0x8>
	}
}
 80037e0:	bf00      	nop
 80037e2:	3730      	adds	r7, #48	; 0x30
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	20000c18 	.word	0x20000c18

080037ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80037f2:	e047      	b.n	8003884 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80037f4:	4b2d      	ldr	r3, [pc, #180]	; (80038ac <prvSwitchTimerLists+0xc0>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037fe:	4b2b      	ldr	r3, [pc, #172]	; (80038ac <prvSwitchTimerLists+0xc0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	3304      	adds	r3, #4
 800380c:	4618      	mov	r0, r3
 800380e:	f7fe f967 	bl	8001ae0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d02d      	beq.n	8003884 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4413      	add	r3, r2
 8003830:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	429a      	cmp	r2, r3
 8003838:	d90e      	bls.n	8003858 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003846:	4b19      	ldr	r3, [pc, #100]	; (80038ac <prvSwitchTimerLists+0xc0>)
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	3304      	adds	r3, #4
 800384e:	4619      	mov	r1, r3
 8003850:	4610      	mov	r0, r2
 8003852:	f7fe f90c 	bl	8001a6e <vListInsert>
 8003856:	e015      	b.n	8003884 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003858:	2300      	movs	r3, #0
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	2300      	movs	r3, #0
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	2100      	movs	r1, #0
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f7ff fd68 	bl	8003338 <xTimerGenericCommand>
 8003868:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d109      	bne.n	8003884 <prvSwitchTimerLists+0x98>
 8003870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003874:	f383 8811 	msr	BASEPRI, r3
 8003878:	f3bf 8f6f 	isb	sy
 800387c:	f3bf 8f4f 	dsb	sy
 8003880:	603b      	str	r3, [r7, #0]
 8003882:	e7fe      	b.n	8003882 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003884:	4b09      	ldr	r3, [pc, #36]	; (80038ac <prvSwitchTimerLists+0xc0>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1b2      	bne.n	80037f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800388e:	4b07      	ldr	r3, [pc, #28]	; (80038ac <prvSwitchTimerLists+0xc0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003894:	4b06      	ldr	r3, [pc, #24]	; (80038b0 <prvSwitchTimerLists+0xc4>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a04      	ldr	r2, [pc, #16]	; (80038ac <prvSwitchTimerLists+0xc0>)
 800389a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800389c:	4a04      	ldr	r2, [pc, #16]	; (80038b0 <prvSwitchTimerLists+0xc4>)
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	6013      	str	r3, [r2, #0]
}
 80038a2:	bf00      	nop
 80038a4:	3718      	adds	r7, #24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20000c10 	.word	0x20000c10
 80038b0:	20000c14 	.word	0x20000c14

080038b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80038ba:	f000 f95f 	bl	8003b7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80038be:	4b15      	ldr	r3, [pc, #84]	; (8003914 <prvCheckForValidListAndQueue+0x60>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d120      	bne.n	8003908 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80038c6:	4814      	ldr	r0, [pc, #80]	; (8003918 <prvCheckForValidListAndQueue+0x64>)
 80038c8:	f7fe f880 	bl	80019cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80038cc:	4813      	ldr	r0, [pc, #76]	; (800391c <prvCheckForValidListAndQueue+0x68>)
 80038ce:	f7fe f87d 	bl	80019cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80038d2:	4b13      	ldr	r3, [pc, #76]	; (8003920 <prvCheckForValidListAndQueue+0x6c>)
 80038d4:	4a10      	ldr	r2, [pc, #64]	; (8003918 <prvCheckForValidListAndQueue+0x64>)
 80038d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80038d8:	4b12      	ldr	r3, [pc, #72]	; (8003924 <prvCheckForValidListAndQueue+0x70>)
 80038da:	4a10      	ldr	r2, [pc, #64]	; (800391c <prvCheckForValidListAndQueue+0x68>)
 80038dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80038de:	2300      	movs	r3, #0
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	4b11      	ldr	r3, [pc, #68]	; (8003928 <prvCheckForValidListAndQueue+0x74>)
 80038e4:	4a11      	ldr	r2, [pc, #68]	; (800392c <prvCheckForValidListAndQueue+0x78>)
 80038e6:	2110      	movs	r1, #16
 80038e8:	200a      	movs	r0, #10
 80038ea:	f7fe f98b 	bl	8001c04 <xQueueGenericCreateStatic>
 80038ee:	4602      	mov	r2, r0
 80038f0:	4b08      	ldr	r3, [pc, #32]	; (8003914 <prvCheckForValidListAndQueue+0x60>)
 80038f2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80038f4:	4b07      	ldr	r3, [pc, #28]	; (8003914 <prvCheckForValidListAndQueue+0x60>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d005      	beq.n	8003908 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80038fc:	4b05      	ldr	r3, [pc, #20]	; (8003914 <prvCheckForValidListAndQueue+0x60>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	490b      	ldr	r1, [pc, #44]	; (8003930 <prvCheckForValidListAndQueue+0x7c>)
 8003902:	4618      	mov	r0, r3
 8003904:	f7fe fd8e 	bl	8002424 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003908:	f000 f966 	bl	8003bd8 <vPortExitCritical>
}
 800390c:	bf00      	nop
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20000c18 	.word	0x20000c18
 8003918:	20000be8 	.word	0x20000be8
 800391c:	20000bfc 	.word	0x20000bfc
 8003920:	20000c10 	.word	0x20000c10
 8003924:	20000c14 	.word	0x20000c14
 8003928:	20000cc4 	.word	0x20000cc4
 800392c:	20000c24 	.word	0x20000c24
 8003930:	08004218 	.word	0x08004218

08003934 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	3b04      	subs	r3, #4
 8003944:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800394c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	3b04      	subs	r3, #4
 8003952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f023 0201 	bic.w	r2, r3, #1
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	3b04      	subs	r3, #4
 8003962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003964:	4a0c      	ldr	r2, [pc, #48]	; (8003998 <pxPortInitialiseStack+0x64>)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	3b14      	subs	r3, #20
 800396e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	3b04      	subs	r3, #4
 800397a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f06f 0202 	mvn.w	r2, #2
 8003982:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	3b20      	subs	r3, #32
 8003988:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800398a:	68fb      	ldr	r3, [r7, #12]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	0800399d 	.word	0x0800399d

0800399c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80039a2:	2300      	movs	r3, #0
 80039a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80039a6:	4b11      	ldr	r3, [pc, #68]	; (80039ec <prvTaskExitError+0x50>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ae:	d009      	beq.n	80039c4 <prvTaskExitError+0x28>
 80039b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b4:	f383 8811 	msr	BASEPRI, r3
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	e7fe      	b.n	80039c2 <prvTaskExitError+0x26>
 80039c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c8:	f383 8811 	msr	BASEPRI, r3
 80039cc:	f3bf 8f6f 	isb	sy
 80039d0:	f3bf 8f4f 	dsb	sy
 80039d4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80039d6:	bf00      	nop
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0fc      	beq.n	80039d8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80039de:	bf00      	nop
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	2000000c 	.word	0x2000000c

080039f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80039f0:	4b07      	ldr	r3, [pc, #28]	; (8003a10 <pxCurrentTCBConst2>)
 80039f2:	6819      	ldr	r1, [r3, #0]
 80039f4:	6808      	ldr	r0, [r1, #0]
 80039f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039fa:	f380 8809 	msr	PSP, r0
 80039fe:	f3bf 8f6f 	isb	sy
 8003a02:	f04f 0000 	mov.w	r0, #0
 8003a06:	f380 8811 	msr	BASEPRI, r0
 8003a0a:	4770      	bx	lr
 8003a0c:	f3af 8000 	nop.w

08003a10 <pxCurrentTCBConst2>:
 8003a10:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003a14:	bf00      	nop
 8003a16:	bf00      	nop

08003a18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003a18:	4808      	ldr	r0, [pc, #32]	; (8003a3c <prvPortStartFirstTask+0x24>)
 8003a1a:	6800      	ldr	r0, [r0, #0]
 8003a1c:	6800      	ldr	r0, [r0, #0]
 8003a1e:	f380 8808 	msr	MSP, r0
 8003a22:	f04f 0000 	mov.w	r0, #0
 8003a26:	f380 8814 	msr	CONTROL, r0
 8003a2a:	b662      	cpsie	i
 8003a2c:	b661      	cpsie	f
 8003a2e:	f3bf 8f4f 	dsb	sy
 8003a32:	f3bf 8f6f 	isb	sy
 8003a36:	df00      	svc	0
 8003a38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003a3a:	bf00      	nop
 8003a3c:	e000ed08 	.word	0xe000ed08

08003a40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003a46:	4b44      	ldr	r3, [pc, #272]	; (8003b58 <xPortStartScheduler+0x118>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a44      	ldr	r2, [pc, #272]	; (8003b5c <xPortStartScheduler+0x11c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d109      	bne.n	8003a64 <xPortStartScheduler+0x24>
 8003a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a54:	f383 8811 	msr	BASEPRI, r3
 8003a58:	f3bf 8f6f 	isb	sy
 8003a5c:	f3bf 8f4f 	dsb	sy
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	e7fe      	b.n	8003a62 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003a64:	4b3c      	ldr	r3, [pc, #240]	; (8003b58 <xPortStartScheduler+0x118>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a3d      	ldr	r2, [pc, #244]	; (8003b60 <xPortStartScheduler+0x120>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d109      	bne.n	8003a82 <xPortStartScheduler+0x42>
 8003a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a72:	f383 8811 	msr	BASEPRI, r3
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	e7fe      	b.n	8003a80 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003a82:	4b38      	ldr	r3, [pc, #224]	; (8003b64 <xPortStartScheduler+0x124>)
 8003a84:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	22ff      	movs	r2, #255	; 0xff
 8003a92:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003a9c:	78fb      	ldrb	r3, [r7, #3]
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	4b30      	ldr	r3, [pc, #192]	; (8003b68 <xPortStartScheduler+0x128>)
 8003aa8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003aaa:	4b30      	ldr	r3, [pc, #192]	; (8003b6c <xPortStartScheduler+0x12c>)
 8003aac:	2207      	movs	r2, #7
 8003aae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ab0:	e009      	b.n	8003ac6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003ab2:	4b2e      	ldr	r3, [pc, #184]	; (8003b6c <xPortStartScheduler+0x12c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	4a2c      	ldr	r2, [pc, #176]	; (8003b6c <xPortStartScheduler+0x12c>)
 8003aba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003abc:	78fb      	ldrb	r3, [r7, #3]
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ac6:	78fb      	ldrb	r3, [r7, #3]
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ace:	2b80      	cmp	r3, #128	; 0x80
 8003ad0:	d0ef      	beq.n	8003ab2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ad2:	4b26      	ldr	r3, [pc, #152]	; (8003b6c <xPortStartScheduler+0x12c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f1c3 0307 	rsb	r3, r3, #7
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d009      	beq.n	8003af2 <xPortStartScheduler+0xb2>
 8003ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae2:	f383 8811 	msr	BASEPRI, r3
 8003ae6:	f3bf 8f6f 	isb	sy
 8003aea:	f3bf 8f4f 	dsb	sy
 8003aee:	60bb      	str	r3, [r7, #8]
 8003af0:	e7fe      	b.n	8003af0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003af2:	4b1e      	ldr	r3, [pc, #120]	; (8003b6c <xPortStartScheduler+0x12c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	021b      	lsls	r3, r3, #8
 8003af8:	4a1c      	ldr	r2, [pc, #112]	; (8003b6c <xPortStartScheduler+0x12c>)
 8003afa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003afc:	4b1b      	ldr	r3, [pc, #108]	; (8003b6c <xPortStartScheduler+0x12c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b04:	4a19      	ldr	r2, [pc, #100]	; (8003b6c <xPortStartScheduler+0x12c>)
 8003b06:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003b10:	4b17      	ldr	r3, [pc, #92]	; (8003b70 <xPortStartScheduler+0x130>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a16      	ldr	r2, [pc, #88]	; (8003b70 <xPortStartScheduler+0x130>)
 8003b16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003b1c:	4b14      	ldr	r3, [pc, #80]	; (8003b70 <xPortStartScheduler+0x130>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a13      	ldr	r2, [pc, #76]	; (8003b70 <xPortStartScheduler+0x130>)
 8003b22:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003b26:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003b28:	f000 f8d6 	bl	8003cd8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003b2c:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <xPortStartScheduler+0x134>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003b32:	f000 f8f5 	bl	8003d20 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003b36:	4b10      	ldr	r3, [pc, #64]	; (8003b78 <xPortStartScheduler+0x138>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a0f      	ldr	r2, [pc, #60]	; (8003b78 <xPortStartScheduler+0x138>)
 8003b3c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003b40:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003b42:	f7ff ff69 	bl	8003a18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003b46:	f7ff f871 	bl	8002c2c <vTaskSwitchContext>
	prvTaskExitError();
 8003b4a:	f7ff ff27 	bl	800399c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3718      	adds	r7, #24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	e000ed00 	.word	0xe000ed00
 8003b5c:	410fc271 	.word	0x410fc271
 8003b60:	410fc270 	.word	0x410fc270
 8003b64:	e000e400 	.word	0xe000e400
 8003b68:	20000d14 	.word	0x20000d14
 8003b6c:	20000d18 	.word	0x20000d18
 8003b70:	e000ed20 	.word	0xe000ed20
 8003b74:	2000000c 	.word	0x2000000c
 8003b78:	e000ef34 	.word	0xe000ef34

08003b7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003b94:	4b0e      	ldr	r3, [pc, #56]	; (8003bd0 <vPortEnterCritical+0x54>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	4a0d      	ldr	r2, [pc, #52]	; (8003bd0 <vPortEnterCritical+0x54>)
 8003b9c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003b9e:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <vPortEnterCritical+0x54>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d10e      	bne.n	8003bc4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ba6:	4b0b      	ldr	r3, [pc, #44]	; (8003bd4 <vPortEnterCritical+0x58>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d009      	beq.n	8003bc4 <vPortEnterCritical+0x48>
 8003bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	603b      	str	r3, [r7, #0]
 8003bc2:	e7fe      	b.n	8003bc2 <vPortEnterCritical+0x46>
	}
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	2000000c 	.word	0x2000000c
 8003bd4:	e000ed04 	.word	0xe000ed04

08003bd8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003bde:	4b11      	ldr	r3, [pc, #68]	; (8003c24 <vPortExitCritical+0x4c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d109      	bne.n	8003bfa <vPortExitCritical+0x22>
 8003be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bea:	f383 8811 	msr	BASEPRI, r3
 8003bee:	f3bf 8f6f 	isb	sy
 8003bf2:	f3bf 8f4f 	dsb	sy
 8003bf6:	607b      	str	r3, [r7, #4]
 8003bf8:	e7fe      	b.n	8003bf8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003bfa:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <vPortExitCritical+0x4c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	4a08      	ldr	r2, [pc, #32]	; (8003c24 <vPortExitCritical+0x4c>)
 8003c02:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003c04:	4b07      	ldr	r3, [pc, #28]	; (8003c24 <vPortExitCritical+0x4c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d104      	bne.n	8003c16 <vPortExitCritical+0x3e>
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	2000000c 	.word	0x2000000c
	...

08003c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003c30:	f3ef 8009 	mrs	r0, PSP
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	4b15      	ldr	r3, [pc, #84]	; (8003c90 <pxCurrentTCBConst>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	f01e 0f10 	tst.w	lr, #16
 8003c40:	bf08      	it	eq
 8003c42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003c46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c4a:	6010      	str	r0, [r2, #0]
 8003c4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003c50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003c54:	f380 8811 	msr	BASEPRI, r0
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	f7fe ffe4 	bl	8002c2c <vTaskSwitchContext>
 8003c64:	f04f 0000 	mov.w	r0, #0
 8003c68:	f380 8811 	msr	BASEPRI, r0
 8003c6c:	bc09      	pop	{r0, r3}
 8003c6e:	6819      	ldr	r1, [r3, #0]
 8003c70:	6808      	ldr	r0, [r1, #0]
 8003c72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c76:	f01e 0f10 	tst.w	lr, #16
 8003c7a:	bf08      	it	eq
 8003c7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003c80:	f380 8809 	msr	PSP, r0
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	f3af 8000 	nop.w

08003c90 <pxCurrentTCBConst>:
 8003c90:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003c94:	bf00      	nop
 8003c96:	bf00      	nop

08003c98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
	__asm volatile
 8003c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca2:	f383 8811 	msr	BASEPRI, r3
 8003ca6:	f3bf 8f6f 	isb	sy
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003cb0:	f7fe ff04 	bl	8002abc <xTaskIncrementTick>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003cba:	4b06      	ldr	r3, [pc, #24]	; (8003cd4 <xPortSysTickHandler+0x3c>)
 8003cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003ccc:	bf00      	nop
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	e000ed04 	.word	0xe000ed04

08003cd8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003cdc:	4b0b      	ldr	r3, [pc, #44]	; (8003d0c <vPortSetupTimerInterrupt+0x34>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ce2:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <vPortSetupTimerInterrupt+0x38>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003ce8:	4b0a      	ldr	r3, [pc, #40]	; (8003d14 <vPortSetupTimerInterrupt+0x3c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a0a      	ldr	r2, [pc, #40]	; (8003d18 <vPortSetupTimerInterrupt+0x40>)
 8003cee:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf2:	099b      	lsrs	r3, r3, #6
 8003cf4:	4a09      	ldr	r2, [pc, #36]	; (8003d1c <vPortSetupTimerInterrupt+0x44>)
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003cfa:	4b04      	ldr	r3, [pc, #16]	; (8003d0c <vPortSetupTimerInterrupt+0x34>)
 8003cfc:	2207      	movs	r2, #7
 8003cfe:	601a      	str	r2, [r3, #0]
}
 8003d00:	bf00      	nop
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	e000e010 	.word	0xe000e010
 8003d10:	e000e018 	.word	0xe000e018
 8003d14:	20000000 	.word	0x20000000
 8003d18:	10624dd3 	.word	0x10624dd3
 8003d1c:	e000e014 	.word	0xe000e014

08003d20 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003d20:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003d30 <vPortEnableVFP+0x10>
 8003d24:	6801      	ldr	r1, [r0, #0]
 8003d26:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003d2a:	6001      	str	r1, [r0, #0]
 8003d2c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003d2e:	bf00      	nop
 8003d30:	e000ed88 	.word	0xe000ed88

08003d34 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003d3a:	f3ef 8305 	mrs	r3, IPSR
 8003d3e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2b0f      	cmp	r3, #15
 8003d44:	d913      	bls.n	8003d6e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003d46:	4a16      	ldr	r2, [pc, #88]	; (8003da0 <vPortValidateInterruptPriority+0x6c>)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003d50:	4b14      	ldr	r3, [pc, #80]	; (8003da4 <vPortValidateInterruptPriority+0x70>)
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	7afa      	ldrb	r2, [r7, #11]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d209      	bcs.n	8003d6e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8003d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5e:	f383 8811 	msr	BASEPRI, r3
 8003d62:	f3bf 8f6f 	isb	sy
 8003d66:	f3bf 8f4f 	dsb	sy
 8003d6a:	607b      	str	r3, [r7, #4]
 8003d6c:	e7fe      	b.n	8003d6c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003d6e:	4b0e      	ldr	r3, [pc, #56]	; (8003da8 <vPortValidateInterruptPriority+0x74>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d76:	4b0d      	ldr	r3, [pc, #52]	; (8003dac <vPortValidateInterruptPriority+0x78>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d909      	bls.n	8003d92 <vPortValidateInterruptPriority+0x5e>
 8003d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d82:	f383 8811 	msr	BASEPRI, r3
 8003d86:	f3bf 8f6f 	isb	sy
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	603b      	str	r3, [r7, #0]
 8003d90:	e7fe      	b.n	8003d90 <vPortValidateInterruptPriority+0x5c>
	}
 8003d92:	bf00      	nop
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	e000e3f0 	.word	0xe000e3f0
 8003da4:	20000d14 	.word	0x20000d14
 8003da8:	e000ed0c 	.word	0xe000ed0c
 8003dac:	20000d18 	.word	0x20000d18

08003db0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b08a      	sub	sp, #40	; 0x28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003dbc:	f7fe fdc4 	bl	8002948 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003dc0:	4b57      	ldr	r3, [pc, #348]	; (8003f20 <pvPortMalloc+0x170>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003dc8:	f000 f90c 	bl	8003fe4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003dcc:	4b55      	ldr	r3, [pc, #340]	; (8003f24 <pvPortMalloc+0x174>)
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f040 808c 	bne.w	8003ef2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d01c      	beq.n	8003e1a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003de0:	2208      	movs	r2, #8
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4413      	add	r3, r2
 8003de6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d013      	beq.n	8003e1a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f023 0307 	bic.w	r3, r3, #7
 8003df8:	3308      	adds	r3, #8
 8003dfa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f003 0307 	and.w	r3, r3, #7
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d009      	beq.n	8003e1a <pvPortMalloc+0x6a>
 8003e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0a:	f383 8811 	msr	BASEPRI, r3
 8003e0e:	f3bf 8f6f 	isb	sy
 8003e12:	f3bf 8f4f 	dsb	sy
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	e7fe      	b.n	8003e18 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d068      	beq.n	8003ef2 <pvPortMalloc+0x142>
 8003e20:	4b41      	ldr	r3, [pc, #260]	; (8003f28 <pvPortMalloc+0x178>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d863      	bhi.n	8003ef2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003e2a:	4b40      	ldr	r3, [pc, #256]	; (8003f2c <pvPortMalloc+0x17c>)
 8003e2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003e2e:	4b3f      	ldr	r3, [pc, #252]	; (8003f2c <pvPortMalloc+0x17c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e34:	e004      	b.n	8003e40 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d903      	bls.n	8003e52 <pvPortMalloc+0xa2>
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1f1      	bne.n	8003e36 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003e52:	4b33      	ldr	r3, [pc, #204]	; (8003f20 <pvPortMalloc+0x170>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d04a      	beq.n	8003ef2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2208      	movs	r2, #8
 8003e62:	4413      	add	r3, r2
 8003e64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	1ad2      	subs	r2, r2, r3
 8003e76:	2308      	movs	r3, #8
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d91e      	bls.n	8003ebc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4413      	add	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d009      	beq.n	8003ea4 <pvPortMalloc+0xf4>
 8003e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e94:	f383 8811 	msr	BASEPRI, r3
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	e7fe      	b.n	8003ea2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	1ad2      	subs	r2, r2, r3
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003eb6:	69b8      	ldr	r0, [r7, #24]
 8003eb8:	f000 f8f6 	bl	80040a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003ebc:	4b1a      	ldr	r3, [pc, #104]	; (8003f28 <pvPortMalloc+0x178>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	4a18      	ldr	r2, [pc, #96]	; (8003f28 <pvPortMalloc+0x178>)
 8003ec8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003eca:	4b17      	ldr	r3, [pc, #92]	; (8003f28 <pvPortMalloc+0x178>)
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	4b18      	ldr	r3, [pc, #96]	; (8003f30 <pvPortMalloc+0x180>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d203      	bcs.n	8003ede <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003ed6:	4b14      	ldr	r3, [pc, #80]	; (8003f28 <pvPortMalloc+0x178>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a15      	ldr	r2, [pc, #84]	; (8003f30 <pvPortMalloc+0x180>)
 8003edc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	4b10      	ldr	r3, [pc, #64]	; (8003f24 <pvPortMalloc+0x174>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003ef2:	f7fe fd37 	bl	8002964 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d009      	beq.n	8003f14 <pvPortMalloc+0x164>
 8003f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f04:	f383 8811 	msr	BASEPRI, r3
 8003f08:	f3bf 8f6f 	isb	sy
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	e7fe      	b.n	8003f12 <pvPortMalloc+0x162>
	return pvReturn;
 8003f14:	69fb      	ldr	r3, [r7, #28]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3728      	adds	r7, #40	; 0x28
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	20004924 	.word	0x20004924
 8003f24:	20004930 	.word	0x20004930
 8003f28:	20004928 	.word	0x20004928
 8003f2c:	2000491c 	.word	0x2000491c
 8003f30:	2000492c 	.word	0x2000492c

08003f34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d046      	beq.n	8003fd4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003f46:	2308      	movs	r3, #8
 8003f48:	425b      	negs	r3, r3
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	4b20      	ldr	r3, [pc, #128]	; (8003fdc <vPortFree+0xa8>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d109      	bne.n	8003f76 <vPortFree+0x42>
 8003f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f66:	f383 8811 	msr	BASEPRI, r3
 8003f6a:	f3bf 8f6f 	isb	sy
 8003f6e:	f3bf 8f4f 	dsb	sy
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	e7fe      	b.n	8003f74 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d009      	beq.n	8003f92 <vPortFree+0x5e>
 8003f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f82:	f383 8811 	msr	BASEPRI, r3
 8003f86:	f3bf 8f6f 	isb	sy
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	60bb      	str	r3, [r7, #8]
 8003f90:	e7fe      	b.n	8003f90 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <vPortFree+0xa8>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d019      	beq.n	8003fd4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d115      	bne.n	8003fd4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <vPortFree+0xa8>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	401a      	ands	r2, r3
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003fb8:	f7fe fcc6 	bl	8002948 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	4b07      	ldr	r3, [pc, #28]	; (8003fe0 <vPortFree+0xac>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	4a06      	ldr	r2, [pc, #24]	; (8003fe0 <vPortFree+0xac>)
 8003fc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003fca:	6938      	ldr	r0, [r7, #16]
 8003fcc:	f000 f86c 	bl	80040a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003fd0:	f7fe fcc8 	bl	8002964 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003fd4:	bf00      	nop
 8003fd6:	3718      	adds	r7, #24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	20004930 	.word	0x20004930
 8003fe0:	20004928 	.word	0x20004928

08003fe4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003fea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003fee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003ff0:	4b27      	ldr	r3, [pc, #156]	; (8004090 <prvHeapInit+0xac>)
 8003ff2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00c      	beq.n	8004018 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	3307      	adds	r3, #7
 8004002:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0307 	bic.w	r3, r3, #7
 800400a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	4a1f      	ldr	r2, [pc, #124]	; (8004090 <prvHeapInit+0xac>)
 8004014:	4413      	add	r3, r2
 8004016:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800401c:	4a1d      	ldr	r2, [pc, #116]	; (8004094 <prvHeapInit+0xb0>)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004022:	4b1c      	ldr	r3, [pc, #112]	; (8004094 <prvHeapInit+0xb0>)
 8004024:	2200      	movs	r2, #0
 8004026:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	4413      	add	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004030:	2208      	movs	r2, #8
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	1a9b      	subs	r3, r3, r2
 8004036:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0307 	bic.w	r3, r3, #7
 800403e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4a15      	ldr	r2, [pc, #84]	; (8004098 <prvHeapInit+0xb4>)
 8004044:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004046:	4b14      	ldr	r3, [pc, #80]	; (8004098 <prvHeapInit+0xb4>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2200      	movs	r2, #0
 800404c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800404e:	4b12      	ldr	r3, [pc, #72]	; (8004098 <prvHeapInit+0xb4>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2200      	movs	r2, #0
 8004054:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	1ad2      	subs	r2, r2, r3
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004064:	4b0c      	ldr	r3, [pc, #48]	; (8004098 <prvHeapInit+0xb4>)
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	4a0a      	ldr	r2, [pc, #40]	; (800409c <prvHeapInit+0xb8>)
 8004072:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	4a09      	ldr	r2, [pc, #36]	; (80040a0 <prvHeapInit+0xbc>)
 800407a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800407c:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <prvHeapInit+0xc0>)
 800407e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004082:	601a      	str	r2, [r3, #0]
}
 8004084:	bf00      	nop
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	20000d1c 	.word	0x20000d1c
 8004094:	2000491c 	.word	0x2000491c
 8004098:	20004924 	.word	0x20004924
 800409c:	2000492c 	.word	0x2000492c
 80040a0:	20004928 	.word	0x20004928
 80040a4:	20004930 	.word	0x20004930

080040a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80040b0:	4b28      	ldr	r3, [pc, #160]	; (8004154 <prvInsertBlockIntoFreeList+0xac>)
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	e002      	b.n	80040bc <prvInsertBlockIntoFreeList+0x14>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d8f7      	bhi.n	80040b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	4413      	add	r3, r2
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d108      	bne.n	80040ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	441a      	add	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	441a      	add	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d118      	bne.n	8004130 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	4b15      	ldr	r3, [pc, #84]	; (8004158 <prvInsertBlockIntoFreeList+0xb0>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d00d      	beq.n	8004126 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	441a      	add	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	e008      	b.n	8004138 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004126:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <prvInsertBlockIntoFreeList+0xb0>)
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	e003      	b.n	8004138 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	429a      	cmp	r2, r3
 800413e:	d002      	beq.n	8004146 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004146:	bf00      	nop
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	2000491c 	.word	0x2000491c
 8004158:	20004924 	.word	0x20004924

0800415c <__libc_init_array>:
 800415c:	b570      	push	{r4, r5, r6, lr}
 800415e:	4e0d      	ldr	r6, [pc, #52]	; (8004194 <__libc_init_array+0x38>)
 8004160:	4c0d      	ldr	r4, [pc, #52]	; (8004198 <__libc_init_array+0x3c>)
 8004162:	1ba4      	subs	r4, r4, r6
 8004164:	10a4      	asrs	r4, r4, #2
 8004166:	2500      	movs	r5, #0
 8004168:	42a5      	cmp	r5, r4
 800416a:	d109      	bne.n	8004180 <__libc_init_array+0x24>
 800416c:	4e0b      	ldr	r6, [pc, #44]	; (800419c <__libc_init_array+0x40>)
 800416e:	4c0c      	ldr	r4, [pc, #48]	; (80041a0 <__libc_init_array+0x44>)
 8004170:	f000 f82c 	bl	80041cc <_init>
 8004174:	1ba4      	subs	r4, r4, r6
 8004176:	10a4      	asrs	r4, r4, #2
 8004178:	2500      	movs	r5, #0
 800417a:	42a5      	cmp	r5, r4
 800417c:	d105      	bne.n	800418a <__libc_init_array+0x2e>
 800417e:	bd70      	pop	{r4, r5, r6, pc}
 8004180:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004184:	4798      	blx	r3
 8004186:	3501      	adds	r5, #1
 8004188:	e7ee      	b.n	8004168 <__libc_init_array+0xc>
 800418a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800418e:	4798      	blx	r3
 8004190:	3501      	adds	r5, #1
 8004192:	e7f2      	b.n	800417a <__libc_init_array+0x1e>
 8004194:	080042a4 	.word	0x080042a4
 8004198:	080042a4 	.word	0x080042a4
 800419c:	080042a4 	.word	0x080042a4
 80041a0:	080042a8 	.word	0x080042a8

080041a4 <memcpy>:
 80041a4:	b510      	push	{r4, lr}
 80041a6:	1e43      	subs	r3, r0, #1
 80041a8:	440a      	add	r2, r1
 80041aa:	4291      	cmp	r1, r2
 80041ac:	d100      	bne.n	80041b0 <memcpy+0xc>
 80041ae:	bd10      	pop	{r4, pc}
 80041b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041b8:	e7f7      	b.n	80041aa <memcpy+0x6>

080041ba <memset>:
 80041ba:	4402      	add	r2, r0
 80041bc:	4603      	mov	r3, r0
 80041be:	4293      	cmp	r3, r2
 80041c0:	d100      	bne.n	80041c4 <memset+0xa>
 80041c2:	4770      	bx	lr
 80041c4:	f803 1b01 	strb.w	r1, [r3], #1
 80041c8:	e7f9      	b.n	80041be <memset+0x4>
	...

080041cc <_init>:
 80041cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ce:	bf00      	nop
 80041d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041d2:	bc08      	pop	{r3}
 80041d4:	469e      	mov	lr, r3
 80041d6:	4770      	bx	lr

080041d8 <_fini>:
 80041d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041da:	bf00      	nop
 80041dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041de:	bc08      	pop	{r3}
 80041e0:	469e      	mov	lr, r3
 80041e2:	4770      	bx	lr
